<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Welcome</title>
        <link>https://untilthecore.github.io/posts/</link>
        <description>Recent content in Posts on Welcome</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-Hans</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 02 May 2020 17:33:32 +0800</lastBuildDate>
        <atom:link href="https://untilthecore.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>初识渲染原理和CSS动画</title>
            <link>https://untilthecore.github.io/posts/%E5%88%9D%E8%AF%86%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E5%92%8Ccss%E5%8A%A8%E7%94%BB/</link>
            <pubDate>Sat, 02 May 2020 17:33:32 +0800</pubDate>
            
            <guid>https://untilthecore.github.io/posts/%E5%88%9D%E8%AF%86%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E5%92%8Ccss%E5%8A%A8%E7%94%BB/</guid>
            <description>1、浏览器渲染原理 浏览器到底是怎么将一个html文件渲染成生动的页面的？话不多说，直接看图
以图中的过程，浏览器的渲染过程大致就是：
 通过HTML解析将HTML文件解析为 DOM 树; 通过CSS解析将CSS文件解析出样式规则（CSSOM树）； 通过合并DOM树和CSSOM树将生成渲染树； 依赖渲染树开始布局（文档流、盒模型、确定位置和尺寸计算）； 知道了哪些节点可见、它们的计算样式以及几何信息，将渲染树中的每个节点转换成屏幕上的实际像素即开始绘制。把边框、文字颜色、阴影等绘制出来。 最后将合成好的页面展示出来。  延伸：
 层叠样式的由来  还是先看图：
为页面上的任何对象计算最后一组样式时，浏览器都会先从适用于该节点的最通用规则开始（例如，如果该节点是 body 元素的子项，则应用所有 body 样式）这种行为被称作为“样式继承”，那么为了不想要继承过来的样式，那么就需要自己单独写样式来覆盖原来的样式，即层叠。而不同的浏览器提供了不同的默认样式（“User Agent 样式”），这让我们一套代码却产生了五花八门的样式，这不符合设计需求。所以又通常要编写一个全局样式（reset.css / normalize.css）来清除默认样式，让代码在不同浏览器上产生一致的效果。
&amp;ldquo;display：none&amp;quot;的元素是否会被渲染？  答案是否。 同为显示和隐藏的一个属性是&amp;quot;visibility&amp;rdquo;,visibility: hidden 与 display: none 是不一样的。前者隐藏元素，但元素仍占据着布局空间（即将其渲染成一个空框），而后者 (display: none) 将元素从渲染树中完全移除，元素既不可见，也不是布局的组成部分。
回流和重绘  回流(reflow)： 回流或称为layout重排。当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染。reflow 会从这个 html的根节点开始往下递归，依次计算所有的结点几何尺寸和位置。reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击等只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。
重绘(repaint)： 改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。
每次Reflow，Repaint后浏览器还需要合并渲染层并输出到屏幕上。所有的这些都会是动画卡顿的原因。 Reflow 的成本比 Repaint 的成本高得多的多。一个结点的 Reflow 很有可能导致子结点，甚至父点以及同级结点的 Reflow 。在一些高性能的电脑上也许还没什么，但是如果 Reflow 发生在手机上，那么这个过程是延慢加载和耗电的。可以在csstrigger上查找某个css属性会触发什么事件。
reflow与repaint的时机： display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发生位置变化。 有些情况下，比如修改了元素的样式，浏览器并不会立刻 reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步 reflow。 有些情况下，比如 resize 窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行 reflow。</description>
            <content type="html"><![CDATA[<h2 id="1浏览器渲染原理">1、浏览器渲染原理</h2>
<p>浏览器到底是怎么将一个html文件渲染成生动的页面的？话不多说，直接看图</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/5/2/171d41d905596b27?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="浏览器渲染过程"></p>
<p>以图中的过程，浏览器的渲染过程大致就是：</p>
<ol>
<li>通过HTML解析将HTML文件解析为 DOM 树;</li>
<li>通过CSS解析将CSS文件解析出样式规则（CSSOM树）；</li>
<li>通过合并DOM树和CSSOM树将生成渲染树；</li>
<li>依赖渲染树开始布局（文档流、盒模型、确定位置和尺寸计算）；</li>
<li>知道了哪些节点可见、它们的计算样式以及几何信息，将渲染树中的每个节点转换成屏幕上的实际像素即开始绘制。把边框、文字颜色、阴影等绘制出来。</li>
<li>最后将合成好的页面展示出来。</li>
</ol>
<p><strong>延伸：</strong></p>
<ol>
<li>层叠样式的由来</li>
</ol>
<p>还是先看图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/5/2/171d43271ba84710?w=582&amp;h=299&amp;f=png&amp;s=14581" alt="CSSOM树"></p>
<p>为页面上的任何对象计算最后一组样式时，浏览器都会先从适用于该节点的最通用规则开始（例如，如果该节点是 body 元素的子项，则应用所有 body 样式）这种行为被称作为“样式继承”，那么为了不想要继承过来的样式，那么就需要自己单独写样式来覆盖原来的样式，即层叠。而不同的浏览器提供了不同的默认样式（“User Agent 样式”），这让我们一套代码却产生了五花八门的样式，这不符合设计需求。所以又通常要编写一个全局样式（reset.css / normalize.css）来清除默认样式，让代码在不同浏览器上产生一致的效果。</p>
<ol start="2">
<li>&ldquo;display：none&quot;的元素是否会被渲染？</li>
</ol>
<p>答案是否。 同为显示和隐藏的一个属性是&quot;visibility&rdquo;,visibility: hidden 与 display: none 是不一样的。前者隐藏元素，但元素仍占据着布局空间（即将其渲染成一个空框），而后者 (display: none) 将元素从渲染树中完全移除，元素既不可见，也不是布局的组成部分。</p>
<ol start="3">
<li>回流和重绘</li>
</ol>
<p><strong>回流(reflow)：</strong>
回流或称为layout重排。当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染。reflow 会从这个 html的根节点开始往下递归，依次计算所有的结点几何尺寸和位置。reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击等只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。</p>
<p><strong>重绘(repaint)：</strong>
改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。</p>
<p>每次Reflow，Repaint后浏览器还需要合并渲染层并输出到屏幕上。所有的这些都会是动画卡顿的原因。
Reflow 的成本比 Repaint 的成本高得多的多。一个结点的 Reflow 很有可能导致子结点，甚至父点以及同级结点的 Reflow 。在一些高性能的电脑上也许还没什么，但是如果 Reflow 发生在手机上，那么这个过程是延慢加载和耗电的。可以在csstrigger上查找某个css属性会触发什么事件。</p>
<p><strong>reflow与repaint的时机：</strong>
display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发生位置变化。
有些情况下，比如修改了元素的样式，浏览器并不会立刻 reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步 reflow。
有些情况下，比如 resize 窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行 reflow。</p>
<p>下面看谷歌开发者网站上的一张图</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/5/2/171d45436d4f782c?w=879&amp;h=742&amp;f=png&amp;s=239986" alt="渲染重排因素"></p>
<p>如果更改一个既不要布局也不要绘制的属性，则浏览器将跳到只执行合成。</p>
<p>这个最后的版本开销最小，最适合于应用生命周期中的高压力点，例如动画或滚动。
继续深入将涉及到浏览器渲染优化，这里不再做展开。想知道哪些CSS属性会触发上面3中中的哪一个，可以查看这个网站<a href="https://csstriggers.com/">CSS触发器</a>。</p>
<p>使用不同的方式改变元素状态的最终显示过程是什么样的呢？</p>
<ol>
<li>使用js调整元素位置 =&gt; 触发上图中的Layout+Paing+Composite</li>
<li>使用CSS调整元素背景色 =&gt; 触发上图Paint和Composite</li>
<li>使用transform调整元素位置 =&gt; 触发上图Composite</li>
</ol>
<p>是否发现使用transform调整元素竟然只触发了Composite，比js少了两个步骤。很明显，使用transform可以提高页面渲染性能，而且用它还可以制作动画，下面来看看动画该怎么做吧。</p>
<h2 id="2css-动画的两种做法transition-和-animation">2、CSS 动画的两种做法（transition 和 animation）</h2>
<p>说动画前先深入了解一下&quot;transform&quot;属性。一般常用来给元素改变位置（translate），旋转（rotate），缩放（scale）。如果还需要对元素设置3d样式的话，就要给被设置元素的父级元素或者直接给body设置perspective属性。</p>
<p>要给元素进行变换前，还要清楚一个知识点-坐标系。我们浏览器以及盒模型的坐标原点都为左上角</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/5/2/171d47be0b4cabc1?w=445&amp;h=344&amp;f=jpeg&amp;s=17566" alt="浏览器坐标系"></p>
<p>当元素发生旋转时这个坐标轴的朝向也将发生改变。注意这一点，有时候就是没考虑好坐标轴的问题造成了布局错乱。</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/5/2/171d48b68b2aa158?w=559&amp;h=217&amp;f=jpeg&amp;s=19404" alt="盒模型坐标系"></p>
<p>了解了坐标系，使用&quot;transform:translate&quot;的时候就更得心应手了。</p>
<p><strong>transition：</strong>
使用transform是将元素从上一个状态转变为transform后的状态，直接设置这个属性后我们在浏览器中看到的就是transform后的元素了，为了让元素在发生变化时有一个过渡的效果，此时就可以用上&quot;transition&quot;啦，配合上&rdquo;:hover&quot;等伪类选择器就可以实现简单的一次性动画效果啦。了解更多关于transition的内容可以看<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition">MDN transition</a></p>
<p><strong>animation：</strong>
transition只能制作一次性的动画，想要制作类似这样效果的动画怎么办呢？</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/5/2/171d499a7af55dec?w=180&amp;h=180&amp;f=gif&amp;s=572601" alt="心跳动图"></p>
<p>使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation">animation</a>配合上&rdquo;@keyframes name{}&ldquo;就可以实现了。属性使用没什么技巧，就是多练。详情看<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@keyframes">MDN @keyframes</a>
。知道了keyframes怎么写了，那animation又该写到哪里呢？和transition一样，将这个属性写到要被实现动画元素的<strong>本身上！</strong></p>
<p>说不如做，动手做一个跳动的心吧，源码<a href="https://codepen.io/untilthecore/pen/rNOGWYM">跳动的心</a></p>
<h3 id="transform总结">transform总结：</h3>
<ol>
<li>inline元素不支持transform，需要先转变为block；</li>
<li>translate(-50%,-50%)可做绝对定位元素的居中；</li>
<li>scale会造成模糊或边界变粗，酌情使用；</li>
<li>属性组合用：transform:scale(1.5) translate(-100%,-100%)</li>
<li>善用搜索引擎，不明白就看MDN；</li>
</ol>
<p>上述内容参考MDN以及谷歌web相关文档。</p>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering">googleDevelopers-渲染性能https://developers.google.com/web/fundamentals/performance/rendering</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path">googleDevelopers-关键渲染路径https://developers.google.com/web/fundamentals/performance/critical-rendering-path</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>CSS布局</title>
            <link>https://untilthecore.github.io/posts/css%E5%B8%83%E5%B1%80/</link>
            <pubDate>Fri, 01 May 2020 15:15:09 +0800</pubDate>
            
            <guid>https://untilthecore.github.io/posts/css%E5%B8%83%E5%B1%80/</guid>
            <description>float布局 常见问题 原理：在父盒子浮动元素的最后加上一个盒子，并给这个盒子设置属性&amp;quot;clear:both&amp;rdquo;，这样就可以实现最基础的清除浮动了。 但是这样有个缺点，就是总要去手动增加一个html元素，然后为这个元素设置css样式，太麻烦。什么方式可以避免呢？那就是使用css伪元素。对css伪元素不太了解的话，可以看这里。 使用伪元素的方式清除浮动，则只需要为浮动盒子的父盒子添加一个类样式。类样式代码如下：
/* 不兼容ie低版本 */ .clearfix { content:&amp;#34;&amp;#34;; display:block; clear:both; } /* 兼容ie低版本 */ /* after伪元素清除法 */ .clearfix:after { content: &amp;#34;&amp;#34;; display: block; height: 0; clear: both; visibility: hidden; } .clearfix: { *zoom: 1; /*为i6/i7老式浏览器准备*/ } /* 双伪元素清除法 */ .clearfix:before, .clearfix:after { content: &amp;#34;&amp;#34;; display: table; } .clearfix:after { clear: both; } .clearfix: { *zoom: 1; /*为i6/i7老式浏览器准备*/ } 2. 图片logo与底部边框有间隙 给img标签添设置属性&amp;quot;vertical-align: middle;&amp;ldquo;值可以是这个属性的其他值。
3. 边框影响了布局 将border属性改为使用outline属性。同样都可以显示边框，但outline不影响布局。
4. 块元素居中显示 在pc上布局时，有时候要对一个固定宽度的块元素设置居中显示，可以使用&amp;quot;margin:0 auto;&amp;ldquo;的方式，但是这并不好，因为假如这个要居中显示的元素就需要一个上外边距，那么使用&amp;quot;margin:0 auto;&amp;ldquo;会破坏布局。比较好的方式是为元素设置以下两种属性：</description>
            <content type="html"><![CDATA[<h2 id="float布局">float布局</h2>
<h3 id="常见问题">常见问题</h3>
<p><strong>原理</strong>：在父盒子浮动元素的最后加上一个盒子，并给这个盒子设置属性&quot;clear:both&rdquo;，这样就可以实现最基础的清除浮动了。
但是这样有个缺点，就是总要去手动增加一个html元素，然后为这个元素设置css样式，太麻烦。什么方式可以避免呢？那就是使用css伪元素。对css伪元素不太了解的话，可以<a href="https://www.cnblogs.com/wonyun/p/5807191.html">看这里</a>。
使用伪元素的方式清除浮动，则只需要为浮动盒子的父盒子添加一个类样式。类样式代码如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#75715e">/* 不兼容ie低版本 */</span>
.<span style="color:#a6e22e">clearfix</span> {
  <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;&#34;</span>;
  <span style="color:#66d9ef">display</span>:<span style="color:#66d9ef">block</span>;
  <span style="color:#66d9ef">clear</span>:<span style="color:#66d9ef">both</span>;
}

<span style="color:#75715e">/* 兼容ie低版本 */</span>
<span style="color:#75715e">/* after伪元素清除法 */</span>
.<span style="color:#a6e22e">clearfix</span>:<span style="color:#a6e22e">after</span> {
  <span style="color:#66d9ef">content</span>: <span style="color:#e6db74">&#34;&#34;</span>;
  <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">block</span>;
  <span style="color:#66d9ef">height</span>: <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">clear</span>: <span style="color:#66d9ef">both</span>;
  <span style="color:#66d9ef">visibility</span>: <span style="color:#66d9ef">hidden</span>;
}
.<span style="color:#a6e22e">clearfix</span><span style="color:#f92672">:</span> {
  <span style="color:#960050;background-color:#1e0010">*</span>zoom: <span style="color:#ae81ff">1</span>; <span style="color:#75715e">/*为i6/i7老式浏览器准备*/</span>
}
<span style="color:#75715e">/* 双伪元素清除法 */</span>
.<span style="color:#a6e22e">clearfix</span>:<span style="color:#a6e22e">before</span><span style="color:#f92672">,</span>
.<span style="color:#a6e22e">clearfix</span>:<span style="color:#a6e22e">after</span> {
  <span style="color:#66d9ef">content</span>: <span style="color:#e6db74">&#34;&#34;</span>;
  <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">table</span>;
}
.<span style="color:#a6e22e">clearfix</span>:<span style="color:#a6e22e">after</span> {
  <span style="color:#66d9ef">clear</span>: <span style="color:#66d9ef">both</span>;
}
.<span style="color:#a6e22e">clearfix</span><span style="color:#f92672">:</span> {
  <span style="color:#960050;background-color:#1e0010">*</span>zoom: <span style="color:#ae81ff">1</span>; <span style="color:#75715e">/*为i6/i7老式浏览器准备*/</span>
}
</code></pre></div><h4 id="2-图片logo与底部边框有间隙">2. 图片logo与底部边框有间隙</h4>
<p>给img标签添设置属性&quot;vertical-align: middle;&ldquo;值可以是这个属性的其他值。</p>
<h4 id="3-边框影响了布局">3. 边框影响了布局</h4>
<p>将border属性改为使用outline属性。同样都可以显示边框，但outline不影响布局。</p>
<h4 id="4-块元素居中显示">4. 块元素居中显示</h4>
<p>在pc上布局时，有时候要对一个固定宽度的块元素设置居中显示，可以使用&quot;margin:0 auto;&ldquo;的方式，但是这并不好，因为假如这个要居中显示的元素就需要一个上外边距，那么使用&quot;margin:0 auto;&ldquo;会破坏布局。比较好的方式是为元素设置以下两种属性：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">centerbox</span> {
  <span style="color:#66d9ef">margin-left</span>:<span style="color:#66d9ef">auto</span>;
  <span style="color:#66d9ef">margin-right</span>:<span style="color:#66d9ef">auto</span>;
}
</code></pre></div><p>注：在css中，非特殊情况，布局时的属性设置最好是只影响到被设置的元素本身，不要让代码影响到其他的布局结果。即改写的代码不要少，但不该写的一定不要多。</p>
<h4 id="5平均布局时会用到的小技巧">5.平均布局时会用到的小技巧</h4>
<p><img src="https://user-gold-cdn.xitu.io/2020/5/1/171ceff5d16dd830?w=649&amp;h=353&amp;f=png&amp;s=3451" alt="">
如图，遇到需要对黑盒子内橙色盒子平均布局时，因为我们需要设置&quot;margin-right:xxpx;&ldquo;会遇到最后一个盒子被挤下去的情况。这是由于每个盒子都&quot;margin-right&quot;使得最后一个橙色盒子装不下了。此时只需在这些需要被平均布局的盒子外再嵌套一个看不见的蓝色盒子，并给它设置一个最后一个橙色盒子所需的&quot;margin-right&quot;大小值就可以实现正常布局了，即图中蓝色盒子超过部分大小。这种布局方式称为负margin。</p>
<h2 id="flex布局">flex布局</h2>
<h3 id="常用属性">常用属性</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>设置位置</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>display:flex</td>
<td>父元素</td>
<td>将布局设置为flex布局</td>
</tr>
<tr>
<td>flex-direction:row(默认)/column</td>
<td>父元素</td>
<td>设置主轴方向</td>
</tr>
<tr>
<td>flex-wrap:wrap/nowrap(默认)</td>
<td>父元素</td>
<td>设置子元素是否换行</td>
</tr>
<tr>
<td>justify-content:center / space-between</td>
<td>父元素</td>
<td>子元素在主轴上的显示方式</td>
</tr>
<tr>
<td>align-items:center</td>
<td>父元素</td>
<td>设置子元素在侧轴上的显示方式</td>
</tr>
<tr>
<td>了解详细的flex，<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">看这里</a></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="注意的点">注意的点</h3>
<ol>
<li>尽量不要把宽高写死。即不要直接设置为固定px单位的值。可以使用&quot;百分比&rdquo;，&ldquo;vw&rdquo;，&ldquo;vh&rdquo;、或者设置&quot;max-width/min-width&rdquo;。</li>
<li>平均布局时适用上述float中的技巧。</li>
<li>flex和margin-xxx:auto;配合会有意外效果。</li>
</ol>
<h2 id="grid布局">grid布局</h2>
<p>grid布局是未来的发展趋势，它简单、强大、易懂。</p>
<p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">学习grid布局</a></p>
<p><a href="https://cssgridgarden.com/#zh-cn">通过一个游戏练习使用grid</a></p>
]]></content>
        </item>
        
        <item>
            <title>CSS应知应会</title>
            <link>https://untilthecore.github.io/posts/css%E5%BA%94%E7%9F%A5%E5%BA%94%E4%BC%9A/</link>
            <pubDate>Fri, 01 May 2020 14:59:14 +0800</pubDate>
            
            <guid>https://untilthecore.github.io/posts/css%E5%BA%94%E7%9F%A5%E5%BA%94%E4%BC%9A/</guid>
            <description></description>
            <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2020/5/1/171cef7a7c5243f3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="css应知应会"></p>
]]></content>
        </item>
        
        <item>
            <title>HTML入门之HTML常用标签</title>
            <link>https://untilthecore.github.io/posts/html%E5%85%A5%E9%97%A8%E4%B9%8Bhtml%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
            <pubDate>Wed, 29 Apr 2020 11:00:02 +0800</pubDate>
            
            <guid>https://untilthecore.github.io/posts/html%E5%85%A5%E9%97%A8%E4%B9%8Bhtml%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
            <description>标签 常用属性 作用     a href \ target 1、跳转外部页面；2、跳转内部锚点；3、跳转到邮箱或电话   img src \ alt \ width \ height 发出 get 请求，展示一张图片   form action \ method 表单。发送 get 或 post 请求，然后刷新页面   input type [ &amp;ldquo;text&amp;rdquo; , &amp;ldquo;password&amp;rdquo; , &amp;ldquo;file&amp;rdquo;，&amp;ldquo;submit&amp;rdquo;，&amp;ldquo;hidden&amp;quot;等 ] \ checked \ value \ disabled \ name 让用户输入内容。通过 type 确定不同的 input 内容，通常搭配 form 使用   table - 表格。使用相对较少    1.</description>
            <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>标签</th>
<th>常用属性</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a">a</a></td>
<td>href \ target</td>
<td>1、跳转外部页面；2、跳转内部锚点；3、跳转到邮箱或电话</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img">img</a></td>
<td>src \ alt \ width \ height</td>
<td>发出 get 请求，展示一张图片</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form">form</a></td>
<td>action \ method</td>
<td>表单。发送 get 或 post 请求，然后刷新页面</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input">input</a></td>
<td>type [ &ldquo;text&rdquo; , &ldquo;password&rdquo; , &ldquo;file&rdquo;，&ldquo;submit&rdquo;，&ldquo;hidden&quot;等 ] \ checked \ value \ disabled \ name</td>
<td>让用户输入内容。通过 type 确定不同的 input 内容，通常搭配 form 使用</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table">table</a></td>
<td>-</td>
<td>表格。使用相对较少</td>
</tr>
</tbody>
</table>
<h2 id="1-a-标签">1. a 标签</h2>
<h3 id="属性-href-">属性[ href ]</h3>
<p><code>[href]</code>可设置以下内容的值：</p>
<ul>
<li>网址
<ul>
<li><a href="https://untilthecore.github.io/">https://untilthecore.github.io/</a></li>
<li><a href="https://untilthecore.github.io/">http://untilthecore.github.io/</a></li>
<li><a href="https://untilthecore.github.io/">//untilthecore.github.io/</a> (推荐用这种，它会自动寻找 https 或者 http 协议的网址)</li>
</ul>
</li>
<li>路径 - 绝对路径：/a/b/c （以地址栏地址为基准寻找） - 相对路径：a/b/c 、 ./a/b/c (以当前文件为基准寻找)</li>
<li>伪协议 - <code>&quot;javascript:代码;&quot;</code>：代码部分可以写代码，这样点击会产生对应代码的效果。或者什么都不写，就是单纯的<code>&quot;javascript:;&quot;</code>，这样可以阻止 a 标签的默认跳转行为。 ； - <code>&quot;mailto:邮箱地址&quot;</code>：值为这个，点击时会调用默认邮件程序，可以发送邮件到填写的邮箱地址； - <code>&quot;tel:手机号&quot;</code>：值为这个，如果是手机端会调用手机默认拨号程序并准备拨向填写的手机号；</li>
<li>id
锚点。如果 a 标签的 href 属性值为某个元素的 id 值，点击时会跳到这个元素的位置。举个例子：</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- 忽略HTML骨架 --&gt;</span>
<span style="color:#75715e">&lt;!-- 假如有一个元素p，且 id 为 aaa --&gt;</span>
&lt;<span style="color:#f92672">p</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;aaa&#34;</span>&gt;&lt;/<span style="color:#f92672">p</span>&gt;
<span style="color:#75715e">&lt;!-- 假如有一个 a 标签，它的 href=&#34;#aaa&#34;,且这个 a 标签离 上述 p 间隔100个p标签的距离 --&gt;</span>
&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#aaa&#34;</span>&gt;跳向aaa&lt;/<span style="color:#f92672">a</span>&gt;
</code></pre></div><p>注：href 可以不设置值，但是点击时会造成页面刷新，有可能有的小伙伴认为可以填写上<code>&quot;#&quot;</code>来避免刷新，但是使用这种方式虽然不刷新，但是如果页面很高，而且这个 a 标签在很下面，会导致页面回到顶部。为了既防止页面刷新又防止回到页面顶部，可以使用<code>&quot;javascript:;&quot;</code></p>
<h3 id="属性-target-">属性[ target ]</h3>
<p><code>&quot;[target]&quot;</code>可以设置以下内容的值：</p>
<ul>
<li>&ldquo;_blank&rdquo;：打开链接到一个新的浏览器标签页上。</li>
<li>&ldquo;self&rdquo;：默认值。打开链接在当前页面上。</li>
<li>&ldquo;_top&rdquo;：打开链接到最顶级的页面，通常和 iframe 使用。不过 iframe 不怎么用了，仅做了解。</li>
<li>&ldquo;parent&rdquo;：打开链接到父级页面，通常和 iframe 使用。比如 html &gt; iframe a &gt; iframe b，iframe b 中 a 的 target 设置为 parent，那么打开链接时会在 iframe a 中打开。同上，仅做了解。</li>
</ul>
<h2 id="2-img-标签">2. img 标签</h2>
<h3 id="属性-src-">属性[ src ]</h3>
<p><code>&quot;[src]&quot;</code>值为图片的地址，可以使网上图片的超链接，也可以是本地的图片路径。</p>
<h3 id="属性-alt-">属性[ alt ]</h3>
<p><code>&quot;[alt]&quot;</code>的值为一段关于图片的描述，在图片加载失败或者网速过慢还没有加载出来时显示给用户看的内容。</p>
<h3 id="属性-width--height-">属性[ width \ height ]</h3>
<p><code>&quot;[width] 和 [height]&quot;</code>：设置图片的宽和高。</p>
<h3 id="事件-onload-">事件[ onload ]</h3>
<p><code>&quot;[onload]&quot;</code>：在图片加载完成后触发的事件</p>
<h3 id="事件-onerror">事件[ onerror]</h3>
<p><code>&quot;[onerror]&quot;</code>：在图片加载失败后触发的事件。应用场景：比如用户访问某个图片失败了，通过这个事件可以替换 img 的 src 为一张默认图给用户看，用来保证一些用户体验性。</p>
<h3 id="响应式">响应式</h3>
<p><code>&quot;[max-width]&quot;</code>：为了保持图片在不同设备上显示效果一致，可以在 css 中设置 img 的<code>max-width</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">style</span>&gt;
  <span style="color:#f92672">img</span> {
    <span style="color:#66d9ef">max-width</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
  }
&lt;/<span style="color:#f92672">style</span>&gt;
</code></pre></div><p>而为什么要使用<code>&quot;max-width&quot;</code>而不是<code>&quot;width&quot;</code>呢？最重要的概念是<strong>保证图片不被拉伸</strong>，使用<code>&quot;max-width&quot;</code>可以保证图片小于屏幕宽度的时候不被拉伸到和屏幕一样宽，只到自己图片大小，从而避免造成看起来非常马赛克。如果还是不太明白可以写代码来帮助理解。</p>
<h2 id="3form-标签">3.form 标签</h2>
<h3 id="属性-action-">属性[ action ]</h3>
<p><code>&quot;[action]&quot;</code>：一个处理此表单信息的程序所在的 URL。</p>
<h3 id="属性-method-">属性[ method ]</h3>
<p><code>&quot;[method ]&quot;</code>：表单的提交方式，值有：</p>
<ul>
<li>post：表单数据会包含在表单体内然后发送给服务器。</li>
<li>get：表单数据会附加在 action 属性的 URI 中，并以 &lsquo;?&rsquo; 作为分隔符，然后这样得到的 URI 再发送给服务器。如果要发送用户的账号密码等个人信息，请使用 post 方式。</li>
</ul>
<h3 id="事件-onsubmit">事件 [onsubmit]</h3>
<p>表单提交时会触发 onsubmit 事件，有时候不想要表单默认的提交行为，我们可以给表单添加 id 然后通过 js 捕获 submit 事件并在事件处理函数中 return false 来阻止默认提交行为。</p>
<h2 id="4input-标签">4.input 标签</h2>
<h3 id="属性-type-">属性[ type ]</h3>
<p><code>&quot;[input]&quot;</code>的 type 属性不同值可以产生各式各样的 input 内容，比如单选框 radio 、复选框 checkbox、颜色选择面板 color 等，大多数的类型值都是比较好理解的，但是这个 <code>&quot;hidden&quot;</code> 是个什么意思且具体用法是什么对于初学者来说有点懵。
为什么要有一个 type 属性值是<code>&quot;hidden&quot;</code>呢？这是因为有时候用户查询得到的数据返回时在地址栏上，而且这次查询得到的数据还要继续用来下一次查询，这时总不可能让用户自己去复制粘贴地址栏上的参数数据吧？所以为了避免这种情况，就需要<code>&quot;hidden&quot;</code>上场了。我们可以在需要用来保存上一次查询结果的地方增加一个<code>&lt;input type=&quot;hidden&quot; value=&quot;&quot;&gt;</code>在我们得到返回结果后通过 js 将结果设置到这个 input 的 value 上，这样在我们下一次需要的时候就可以直接通过 value 去取到这个值了。
这种操作表单的方式被称作：<code>隐藏域</code></p>
<h3 id="属性-name-">属性[ name ]</h3>
<p><code>&quot;[name]&quot;</code>属性作用有这些：</p>
<ul>
<li>给 radio 和 checkbox 归类；</li>
<li>表单提交时传给后台的表单项的名字，它与属性 <code>&quot;value&quot;</code>组成键值对发送到后端，<code>&quot;name&quot;</code>是键。</li>
</ul>
<h3 id="属性-value-">属性[ value ]</h3>
<p><code>&quot;[value]&quot;</code>属性与<code>&quot;name&quot;</code>属性组成键值对发送到后端，<code>value</code>是值。</p>
<h3 id="事件-onchange-">事件[ onchange ]</h3>
<p><code>&quot;[onchange]&quot;</code>：input 内容发生改变时触发的事件，比如类型为 text 的 input 有输入产生、类型为 select 的 input 选中了某个选项等。</p>
<h3 id="事件-onfocus">事件[ onfocus]</h3>
<p><code>&quot;[onfocus]&quot;</code>：input 产生焦点时触发的事件。比如有一个类型为 text 的 input，我们鼠标点击了这个 input 时产生<code>&quot;onfocus&quot;</code>事件。</p>
<h3 id="事件-onblur-">事件[ onblur ]</h3>
<p><code>&quot;[onblur ]&quot;</code>：input 失去焦点时触发的事件。比如一个类型为 text 的 input，内容输入完成后鼠标点击了非这个 input 区域时产生<code>&quot;onblur&quot;</code>事件。</p>
<h2 id="5table-标签">5.table 标签</h2>
<p><code>&quot;[table]&quot;</code>内容比较简单，主要就是练习一个熟练度。table 本身用的地方不是很多，但可以用来进行一些比较特殊表格布局。
使用<code>table</code>注意的点：</p>
<ul>
<li>使用 css 设置<code>border-collapse:collapse</code>和<code>border-spacing: 0</code>，这样可以清除表格默认样式，使表格更好看。</li>
<li>不要在标签上设置表格样式，请在 css 中设置 table 的样式，这是官方说的。</li>
</ul>
<h3 id="熟能生巧">熟能生巧</h3>
<p><a href="https://codepen.io/untilthecore/pen/zYvzgyB">一个简单表格的练习</a></p>
<p>打不开就看这里吧：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en&#34;</span>&gt;
  &lt;<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UTF-8&#34;</span> /&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;viewport&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;width=device-width, initial-scale=1.0&#34;</span> /&gt;
    &lt;<span style="color:#f92672">title</span>&gt;Document&lt;/<span style="color:#f92672">title</span>&gt;
    &lt;<span style="color:#f92672">style</span>&gt;
      <span style="color:#f92672">th</span><span style="color:#f92672">,</span>
      <span style="color:#f92672">td</span> {
        <span style="color:#66d9ef">border</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#ccc</span>;
        <span style="color:#66d9ef">text-align</span>: <span style="color:#66d9ef">center</span>;
      }
      <span style="color:#f92672">table</span> {
        <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">300</span><span style="color:#66d9ef">px</span>;
        <span style="color:#75715e">/* 设置单元格距离和单元格边框合并 */</span>
        <span style="color:#66d9ef">border-collapse</span>: <span style="color:#66d9ef">collapse</span>;
        <span style="color:#66d9ef">border-spacing</span>: <span style="color:#ae81ff">0</span>;
      }
    &lt;/<span style="color:#f92672">style</span>&gt;
  &lt;/<span style="color:#f92672">head</span>&gt;
  &lt;<span style="color:#f92672">body</span>&gt;
    &lt;<span style="color:#f92672">table</span>&gt;
      &lt;<span style="color:#f92672">thead</span>&gt;
        &lt;<span style="color:#f92672">tr</span>&gt;
          &lt;<span style="color:#f92672">th</span>&gt;&lt;/<span style="color:#f92672">th</span>&gt;
          &lt;<span style="color:#f92672">th</span>&gt;价格&lt;/<span style="color:#f92672">th</span>&gt;
          &lt;<span style="color:#f92672">th</span>&gt;分类&lt;/<span style="color:#f92672">th</span>&gt;
          &lt;<span style="color:#f92672">th</span>&gt;日期&lt;/<span style="color:#f92672">th</span>&gt;
        &lt;/<span style="color:#f92672">tr</span>&gt;
      &lt;/<span style="color:#f92672">thead</span>&gt;
      &lt;<span style="color:#f92672">tbody</span>&gt;
        &lt;<span style="color:#f92672">tr</span>&gt;
          &lt;<span style="color:#f92672">th</span>&gt;商品1&lt;/<span style="color:#f92672">th</span>&gt;
          &lt;<span style="color:#f92672">td</span>&gt;100&lt;/<span style="color:#f92672">td</span>&gt;
          &lt;<span style="color:#f92672">td</span>&gt;分类1&lt;/<span style="color:#f92672">td</span>&gt;
          &lt;<span style="color:#f92672">td</span>&gt;2020-4-29&lt;/<span style="color:#f92672">td</span>&gt;
        &lt;/<span style="color:#f92672">tr</span>&gt;
        &lt;<span style="color:#f92672">tr</span>&gt;
          &lt;<span style="color:#f92672">th</span>&gt;商品2&lt;/<span style="color:#f92672">th</span>&gt;
          &lt;<span style="color:#f92672">td</span>&gt;100&lt;/<span style="color:#f92672">td</span>&gt;
          &lt;<span style="color:#f92672">td</span>&gt;分类2&lt;/<span style="color:#f92672">td</span>&gt;
          &lt;<span style="color:#f92672">td</span>&gt;2020-4-29&lt;/<span style="color:#f92672">td</span>&gt;
        &lt;/<span style="color:#f92672">tr</span>&gt;
        &lt;<span style="color:#f92672">tr</span>&gt;
          &lt;<span style="color:#f92672">th</span>&gt;商品3&lt;/<span style="color:#f92672">th</span>&gt;
          &lt;<span style="color:#f92672">td</span>&gt;100&lt;/<span style="color:#f92672">td</span>&gt;
          &lt;<span style="color:#f92672">td</span>&gt;分类3&lt;/<span style="color:#f92672">td</span>&gt;
          &lt;<span style="color:#f92672">td</span>&gt;2020-4-29&lt;/<span style="color:#f92672">td</span>&gt;
        &lt;/<span style="color:#f92672">tr</span>&gt;
      &lt;/<span style="color:#f92672">tbody</span>&gt;
      &lt;<span style="color:#f92672">tfoot</span>&gt;
        &lt;<span style="color:#f92672">tr</span>&gt;
          &lt;<span style="color:#f92672">th</span>&gt;价格总计&lt;/<span style="color:#f92672">th</span>&gt;
          <span style="color:#75715e">&lt;!-- colspan 让这一列占 3 列的宽度 --&gt;</span>
          &lt;<span style="color:#f92672">td</span> <span style="color:#a6e22e">colspan</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;3&#34;</span>&gt;300&lt;/<span style="color:#f92672">td</span>&gt;
        &lt;/<span style="color:#f92672">tr</span>&gt;
      &lt;/<span style="color:#f92672">tfoot</span>&gt;
    &lt;/<span style="color:#f92672">table</span>&gt;
  &lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>学习使人充盈，分享使人进步！</p>
<p>此文为 UntilTheCore 原创，转载请说明作者和出处！</p>
]]></content>
        </item>
        
        <item>
            <title>HTML入门笔记1</title>
            <link>https://untilthecore.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
            <pubDate>Tue, 28 Apr 2020 18:12:06 +0800</pubDate>
            
            <guid>https://untilthecore.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
            <description>1.HTML 是怎么产生的？  Tim Berners-Lee &amp;ndash; 万维网的创建者  探寻互联网的初始，那么就必然要了解一下李老爷子本人，这位牛人为如今精彩纷呈的互联网世界打下了坚实的地基。1989 年他开发了世上第一个浏览器和第一个服务器，由此种下了互联网世界的种子，而且他发明的 WWW、URL、HTTP 一直延续至今。
那这个东西到底是怎么产生的呢？1、因为一杯咖啡，这让我联想到了 java；2、为了可以上网冲浪；
2.HTML 怎么快速开始 现代的编辑器配合 Emmet 语法可以快速创建一个 HTML 的骨架，虽然这节省了我们书写骨架代码的时间，但还是有必要了解一下这些内容是什么。 在 vscode 中创建一个 HTML 的文件，使用 Emmet 语法输入! + tab键即可快速生成 html 骨架。
3.HTML 常用的章节标签有哪些？    章节标签 介绍     h1~h6 文章内容标题   section 相对于 article 元素更加广泛，每个区块都可以使用，比如页面里的导航菜单、文章正文、文章的评论等。   article 代表文档、页面或应用程序中独立的、完整的、可以独自被外部引用的内容。它可以是一篇博客、一篇帖子、一段用户评论   p 段落   header 头部   footer 页脚   main 主要内容。内容主体区域，放在在 header 和 footer 中间   aside 旁支内容   div 划分    4.</description>
            <content type="html"><![CDATA[<h2 id="1html-是怎么产生的">1.HTML 是怎么产生的？</h2>
<blockquote>
<h5 id="tim-berners-lee----万维网的创建者">Tim Berners-Lee &ndash; 万维网的创建者</h5>
</blockquote>
<p>探寻互联网的初始，那么就必然要了解一下<a href="https://baike.baidu.com/item/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF%C2%B7%E6%9D%8E/8868412?fromtitle=Tim%20Berners-Lee&amp;fromid=1836386&amp;fr=aladdin">李老爷子</a>本人，这位牛人为如今精彩纷呈的互联网世界打下了坚实的地基。1989 年他开发了世上第一个浏览器和第一个服务器，由此种下了互联网世界的种子，而且他发明的 WWW、URL、HTTP 一直延续至今。</p>
<p>那这个东西到底是怎么产生的呢？1、因为一杯咖啡，这让我联想到了 java；2、为了可以上网冲浪；</p>
<h2 id="2html-怎么快速开始">2.HTML 怎么快速开始</h2>
<p>现代的编辑器配合 Emmet 语法可以快速创建一个 HTML 的骨架，虽然这节省了我们书写骨架代码的时间，但还是有必要了解一下这些内容是什么。
<img src="https://img-blog.csdnimg.cn/20200428163933267.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VudGlsVGhlQ29yZQ==,size_16,color_FFFFFF,t_70" alt="HTML骨架解读">
在 vscode 中创建一个 HTML 的文件，使用 Emmet 语法输入<code>! + tab键</code>即可快速生成 html 骨架。</p>
<h2 id="3html-常用的章节标签有哪些">3.HTML 常用的章节标签有哪些？</h2>
<table>
<thead>
<tr>
<th>章节标签</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>h1~h6</td>
<td>文章内容标题</td>
</tr>
<tr>
<td>section</td>
<td>相对于 article 元素更加广泛，每个区块都可以使用，比如页面里的导航菜单、文章正文、文章的评论等。</td>
</tr>
<tr>
<td>article</td>
<td>代表文档、页面或应用程序中独立的、完整的、可以独自被外部引用的内容。它可以是一篇博客、一篇帖子、一段用户评论</td>
</tr>
<tr>
<td>p</td>
<td>段落</td>
</tr>
<tr>
<td>header</td>
<td>头部</td>
</tr>
<tr>
<td>footer</td>
<td>页脚</td>
</tr>
<tr>
<td>main</td>
<td>主要内容。内容主体区域，放在在 header 和 footer 中间</td>
</tr>
<tr>
<td>aside</td>
<td>旁支内容</td>
</tr>
<tr>
<td>div</td>
<td>划分</td>
</tr>
</tbody>
</table>
<h2 id="4html-常用的内容标签有哪些">4.HTML 常用的内容标签有哪些？</h2>
<table>
<thead>
<tr>
<th>内容标签</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>ol + li</td>
<td>ordered list + list item。无序列表</td>
</tr>
<tr>
<td>ul + li</td>
<td>unordered list + list item。有序列表</td>
</tr>
<tr>
<td>dl+ dd + dt</td>
<td>description list + term + data。自定义列表</td>
</tr>
<tr>
<td>pre</td>
<td>被 pre 包裹的内容以原始内容输出。比如内容有多个空格以及换行都正常显示</td>
</tr>
<tr>
<td>hr</td>
<td>分隔线</td>
</tr>
<tr>
<td>br</td>
<td>换行</td>
</tr>
<tr>
<td>a</td>
<td>超链接标签</td>
</tr>
<tr>
<td>em</td>
<td>语气上强调</td>
</tr>
<tr>
<td>strong</td>
<td>表示内容重要</td>
</tr>
<tr>
<td>code</td>
<td>内容字体等宽。一般包裹代码块</td>
</tr>
<tr>
<td>quote</td>
<td>引用。行内引用</td>
</tr>
<tr>
<td>blockquote</td>
<td>块级引用。被包裹的内容与上一行内容有一个缩进</td>
</tr>
</tbody>
</table>
<h2 id="5html-的全局属性有哪些">5.HTML 的全局属性有哪些？</h2>
<p>全局属性即所有标签都会有的属性。</p>
<table>
<thead>
<tr>
<th>全局属性</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>class</td>
<td>类。给元素取一个类名，一般配合 css 设置样式</td>
</tr>
<tr>
<td>id</td>
<td>全局唯一 id，一般配合 js 使用，但是由于多处使用了浏览器也不报错，所以慎用</td>
</tr>
<tr>
<td>style</td>
<td>内联样式</td>
</tr>
<tr>
<td>title</td>
<td>鼠标移到标签上会在鼠标旁显示 title 的值</td>
</tr>
<tr>
<td>hidden</td>
<td>控制标签的隐藏</td>
</tr>
<tr>
<td>tabindex</td>
<td>如果元素需要被键盘 tab 键选中，可以设置值。值 &lt; 0，表示不被 tab 选中；值 == 0，表示最后被选中；值 &gt; 0 表示按值大小顺序选中</td>
</tr>
<tr>
<td>contenteditable</td>
<td>使标签可被直接编辑。想要更直观看到这个属性的效果可以<a href="https://jsbin.com/varinuz/2/edit?html,output">点击这里</a>修改样式试试看，或者复制下面的代码运行一下。</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="color:#f92672">html</span>&gt;
  &lt;<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span> /&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;viewport&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;width=device-width&#34;</span> /&gt;
    &lt;<span style="color:#f92672">title</span>&gt;JS Bin&lt;/<span style="color:#f92672">title</span>&gt;
  &lt;/<span style="color:#f92672">head</span>&gt;
  &lt;<span style="color:#f92672">body</span>&gt;
    <span style="color:#75715e">&lt;!-- 将style放入body并设置display为block再开启元素可编辑即可在网页上编辑页面样式 --&gt;</span>
    &lt;<span style="color:#f92672">style</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;display:block;&#34;</span> <span style="color:#a6e22e">contenteditable</span>&gt;
      <span style="color:#f92672">header</span> {
        <span style="color:#66d9ef">background-color</span>: <span style="color:#66d9ef">pink</span>;
      }
    &lt;/<span style="color:#f92672">style</span>&gt;
    &lt;<span style="color:#f92672">header</span>&gt;我是头部&lt;/<span style="color:#f92672">header</span>&gt;
    &lt;<span style="color:#f92672">section</span> <span style="color:#a6e22e">contenteditable</span>&gt;我是章节&lt;/<span style="color:#f92672">section</span>&gt;
    &lt;<span style="color:#f92672">footer</span>&gt;我是页脚&lt;/<span style="color:#f92672">footer</span>&gt;
  &lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>正确使用hugo主题的姿势</title>
            <link>https://untilthecore.github.io/posts/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/</link>
            <pubDate>Mon, 27 Apr 2020 22:28:15 +0800</pubDate>
            
            <guid>https://untilthecore.github.io/posts/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/</guid>
            <description>在《如何用hugo搭建个人博客中》已经介绍了简单的主题引入办法，这里就不再赘述了。
现在我们来讲讲如何配置我们下载的新主题！（内容可能不多不全，Hugo的使用还在摸索阶段）
  下载主题前要先看主题的Demo，看是否是自己想要的。没有Demo示例给看那就clone下来后跑起来看看是不是中意的，但是有的clone到的主题有可能较精简，怎么办呢？往下看。
  选好中意的主题了，那么就一定要看作者的配置介绍，这个配置介绍一般都是介绍如何配置config.toml，但这个介绍可能不够全，那么就要自己看clone下来的主题中这个文件夹exampleSite中的config.toml。有的主题还有full-config.toml,这个内容更全面。以我使用的主题为例，路径结构为：themes\hello-friend-ng\exampleSite\config.toml
  接下来我将以我使用的主题为例，介绍config.toml配置内容
[[menu.main]] identifier = &amp;#34;blog&amp;#34; name = &amp;#34;Blogs&amp;#34; url = &amp;#34;/posts&amp;#34; [[menu.main]] name = &amp;#34;Categories&amp;#34; identifier = &amp;#34;categories&amp;#34; url = &amp;#34;/categories/&amp;#34; [[menu.main]] identifier = &amp;#34;tags&amp;#34; name = &amp;#34;Tags&amp;#34; url = &amp;#34;/tags/&amp;#34; [[menu.main]] identifier = &amp;#34;about&amp;#34; name = &amp;#34;About&amp;#34; url = &amp;#34;about/&amp;#34; 有[[menu.main]]即配置导航菜单，对应的地方如图：
[[params.social]] name = &amp;#34;email&amp;#34; url = &amp;#34;mailto:untilthecore@gmail.com&amp;#34; [[params.social]] name = &amp;#34;github&amp;#34; url = &amp;#34;https://github.com/UntilTheCore&amp;#34; 有[[params.social]]即配置图标链接，对应地方如图：
baseurl = &amp;#34;https://untilthecore.github.io/&amp;#34; title = &amp;#34;My Blog&amp;#34; languageCode = &amp;#34;zh-Hans&amp;#34; theme = &amp;#34;hello-friend-ng&amp;#34;  baseurl：配置站点基址，如果要放在github上或者自己的云服务器上，请正确配置地址，否则出了能访问主页，其他地方都是 404 title：设置标题 languageCode：设置语言 theme：设置主题  其他的小地方的配置有注释，配合本地服务器可以方面查看修改后的效果。</description>
            <content type="html"><![CDATA[<p>在《<a href="https://untilthecore.github.io/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">如何用hugo搭建个人博客中</a>》已经介绍了简单的主题引入办法，这里就不再赘述了。</p>
<p>现在我们来讲讲如何配置我们下载的新主题！（内容可能不多不全，Hugo的使用还在摸索阶段）</p>
<ol>
<li>
<p>下载主题前要先看主题的Demo，看是否是自己想要的。没有Demo示例给看那就clone下来后跑起来看看是不是中意的，但是有的clone到的主题有可能较精简，怎么办呢？往下看。</p>
</li>
<li>
<p>选好中意的主题了，那么就一定要看作者的配置介绍，这个配置介绍一般都是介绍如何配置<code>config.toml</code>，但这个介绍可能不够全，那么就要自己看clone下来的主题中这个文件夹<code>exampleSite</code>中的<code>config.toml</code>。有的主题还有<code>full-config.toml</code>,这个内容更全面。以我使用的主题为例，路径结构为：<code>themes\hello-friend-ng\exampleSite\config.toml</code></p>
</li>
<li>
<p>接下来我将以<a href="https://themes.gohugo.io/hugo-theme-hello-friend-ng/">我使用的主题</a>为例，介绍<code>config.toml</code>配置内容</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> <span style="color:#f92672">[[</span>menu.main<span style="color:#f92672">]]</span>
   identifier <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;blog&#34;</span>
   name       <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Blogs&#34;</span>
   url        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/posts&#34;</span>
 <span style="color:#f92672">[[</span>menu.main<span style="color:#f92672">]]</span>
   name       <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Categories&#34;</span>
   identifier <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;categories&#34;</span>
   url        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/categories/&#34;</span>
 <span style="color:#f92672">[[</span>menu.main<span style="color:#f92672">]]</span>
   identifier <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;tags&#34;</span>
   name       <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Tags&#34;</span>
   url        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/tags/&#34;</span>
 <span style="color:#f92672">[[</span>menu.main<span style="color:#f92672">]]</span>
   identifier <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;about&#34;</span>
   name       <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;About&#34;</span>
   url        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;about/&#34;</span>
</code></pre></div><p>有<code>[[menu.main]]</code>即配置导航菜单，对应的地方如图：</p>
<p><img src="../../static/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95%E5%9B%BE.png" alt="导航菜单图"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[[</span>params.social<span style="color:#f92672">]]</span>
name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;email&#34;</span>
url  <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mailto:untilthecore@gmail.com&#34;</span>

<span style="color:#f92672">[[</span>params.social<span style="color:#f92672">]]</span>
name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github&#34;</span>
url  <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://github.com/UntilTheCore&#34;</span>
</code></pre></div><p>有<code>[[params.social]]</code>即配置图标链接，对应地方如图：</p>
<p><img src="../../static/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/%E5%9B%BE%E6%A0%87%E9%93%BE%E6%8E%A5.jpg" alt="图标链接图"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">baseurl      <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://untilthecore.github.io/&#34;</span>
title        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My Blog&#34;</span>
languageCode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;zh-Hans&#34;</span>
theme        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello-friend-ng&#34;</span>
</code></pre></div><ul>
<li>baseurl：配置站点基址，如果要放在github上或者自己的云服务器上，请正确配置地址，否则出了能访问主页，其他地方都是 404</li>
<li>title：设置标题</li>
<li>languageCode：设置语言</li>
<li>theme：设置主题</li>
</ul>
<p>其他的小地方的配置有注释，配合本地服务器可以方面查看修改后的效果。</p>
</li>
<li>
<p>第一次使用时，可能会好奇我们的 <code>.md</code> 文件是怎么产生标签（Tags）和分类（Categories）的？这就是通过使用<code>hugo new posts/xxxxxx.md</code>创建博客文件时，hugo自动为我们在文件头部生成了这些内容：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">title: <span style="color:#e6db74">&#34;正确使用hugo主题的姿势&#34;</span>
date: 2020-04-27T22:28:15+08:00
draft: false
tags: <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;Hugo&#34;</span><span style="color:#f92672">]</span>
categories: <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;教程&#34;</span><span style="color:#f92672">]</span>
</code></pre></div><ul>
<li>title：文章标题；</li>
<li>data：文章被创建的事件</li>
<li>draft：是否草稿内容，如果为true，将不显示在博客站点中。</li>
<li>tags：为这篇文章创建标签，是数组形式<code>[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</code></li>
<li>categories：为这篇文章创建分类，是数组形式<code>[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</code></li>
</ul>
<p>由于在文章这里设置了<code>tags</code>和<code>categories</code>,所以我们可以在导航菜单中看到标签和文章分类信息。</p>
</li>
</ol>
<p>在<code>.md</code>文件中，还可以设置更多其他的内容，比如设置版权信息等。有需要的话可以自行了解，我的经验就是多下几个主题，看看这些作者是怎么配置的。如果你有更多更好的信息，欢迎来信告诉我</p>
<p>创建博客后如何配置主题的基础内容介绍完毕，配置好这些就可以愉快地写博客啦！如果想配置更多更强大的内容，可以多多翻看<a href="https://gohugo.io/documentation/">Hugo官方文档</a>。</p>
<h4 id="写博客时要注意的点">写博客时要注意的点：</h4>
<p>可能在posts中使用MarkDown插入图片时好好的，但是上传到github上后图片就不显示了呢？这是由于我们写文章时是在站点生成器的环境中，而上传的代码是在public中，为了保证上传后依然能正确显示，我使用的技巧是在public文件夹中新建一个static的文件夹用来保存我们文章的图片，且每一文章有对应的文件夹去保存图片，如图：</p>
<p><img src="../../static/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87%E7%9A%84%E4%BF%9D%E5%AD%98%E6%96%B9%E5%BC%8F.jpg" alt="文章图片的保存方式"></p>
<p>鉴于此，我们在<code>posts/</code>下写文章时使用的图片地址要以<code>public/posts/文章标题/index.html</code>为基准来找到<code>public\static</code>目录。一段示例：</p>
<pre><code>../../static/正确使用hugo主题的姿势/文章图片的保存方式.jpg
</code></pre>
<p>文章有误或不足之处，欢迎指正！谢谢！</p>
<h3 id="本文由untilthecore原创转载请说明作者和出处">本文由UntilTheCore原创，转载请说明作者和出处！</h3>
]]></content>
        </item>
        
        <item>
            <title>使用hugo搭建个人博客</title>
            <link>https://untilthecore.github.io/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
            <pubDate>Mon, 27 Apr 2020 13:06:46 +0800</pubDate>
            
            <guid>https://untilthecore.github.io/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
            <description>阅读前你需要了解这些内容：  git MarkDown  使用 Hugo 搭建博客的步骤非常简单。
按照官网 Quick Start 即可快速创建一个站点。此文旨在对官方文档细节补充以及部署到自己的github上。
  下载Hugo
  解压出对应包中的Hugo.exe到一个空目录
  将 2 中存放Hugo.exe的目录添加到系统变量&amp;quot;path&amp;quot;中。（不会设置？点这里）
  进入Hugo官网 点击 Quick Start
  当下载并设置好Hugo后，就可以直接从Step 2开始操作。
# 这个 quickstart 请改成你想要的名字,最好对应你github上的名字且全小写 # 比如：untilthecore.github.io-generator # 这个命令会生成 untilthecore.github.io-generator 的文件夹 # 这个文件夹就是博客站点的生成器，为了方便知道这个文件夹是干什么的，在最后加上 generator，当然 creator 也行 hugo new site quickstart # 那么真正要输入的命令为 hugo new site untilthecore.github.io-generator   当得到站点生成器文件夹后，使用 cd 命令进入文件夹并依次执行以下命令
# 为 untilthecore.github.io-generator 初始化 git 仓库 git init # 为站点设置一个主题（这个主题可以修改） git submodule add https://github.</description>
            <content type="html"><![CDATA[<h3 id="阅读前你需要了解这些内容">阅读前你需要了解这些内容：</h3>
<ul>
<li>git</li>
<li>MarkDown</li>
</ul>
<p>使用 Hugo 搭建博客的步骤非常简单。</p>
<p>按照官网 Quick Start 即可快速创建一个站点。此文旨在对官方文档细节补充以及部署到自己的github上。</p>
<ol>
<li>
<p><a href="https://github.com/gohugoio/hugo/releases">下载Hugo</a></p>
</li>
<li>
<p>解压出对应包中的Hugo.exe到一个空目录</p>
</li>
<li>
<p>将 2 中存放Hugo.exe的目录添加到系统变量&quot;path&quot;中。（不会设置？<a href="https://www.jb51.net/os/win10/663281.html">点这里</a>）</p>
</li>
<li>
<p>进入<a href="https://gohugo.io/">Hugo官网</a> 点击 Quick Start</p>
</li>
<li>
<p>当下载并设置好Hugo后，就可以直接从Step 2开始操作。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 这个 quickstart 请改成你想要的名字,最好对应你github上的名字且全小写</span>
<span style="color:#75715e"># 比如：untilthecore.github.io-generator</span>
<span style="color:#75715e"># 这个命令会生成 untilthecore.github.io-generator 的文件夹</span>
<span style="color:#75715e"># 这个文件夹就是博客站点的生成器，为了方便知道这个文件夹是干什么的，在最后加上 generator，当然 creator 也行</span>
hugo new site quickstart

<span style="color:#75715e"># 那么真正要输入的命令为</span>
hugo new site untilthecore.github.io-generator
</code></pre></div></li>
<li>
<p>当得到站点生成器文件夹后，使用 <code>cd</code> 命令进入文件夹并依次执行以下命令</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> <span style="color:#75715e"># 为 untilthecore.github.io-generator 初始化 git 仓库</span>
 git init
 <span style="color:#75715e"># 为站点设置一个主题（这个主题可以修改）</span>
 git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
 <span style="color:#75715e"># 向配置文件写入 theme = &#34;ananke&#34; 即配置 ananke 主题</span>
 echo <span style="color:#e6db74">&#39;theme = &#34;ananke&#34;&#39;</span> &gt;&gt; config.toml
</code></pre></div></li>
<li>
<p>完成以上步骤站点就配置好了，输入以下命令即可创建第一篇博客了</p>
<p><code>hugo new posts/my-first-post.md</code></p>
</li>
<li>
<p>通过以上步骤，站点已经创建好了，且写了一篇文章，赶紧通过这个命令启动本地服务器看看你的博客是什么样子吧。</p>
<p><code>hugo server -D</code></p>
</li>
<li>
<p>基础完成了，接下来需要对站点进行一些设置，让它看起来更像是你自己的站点。找到<code>config.toml</code> 文件，配置这些内容：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 配置域，如果配置到了github上，这里要改为你自己github.io的地址。</span>
baseURL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://example.org/&#34;</span>
<span style="color:#75715e"># 配置语言 中文可以改为 &#34;zh-Hans&#34;</span>
languageCode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;en-us&#34;</span>
<span style="color:#75715e"># 站点标签名，浏览器标签上的内容</span>
title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My New Hugo Site&#34;</span>
<span style="color:#75715e"># 主题设置，有新主题，就把主题名设置到这里</span>
theme <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ananke&#34;</span>
</code></pre></div></li>
<li>
<p>本地操作已经完成了，想要将站点部署到github或者自己的云服务器上，请继续往下看。</p>
</li>
<li>
<p>都配置好后，确保你控制台还处于博客生成器目录下(即&quot;untilthecore.github.io-generator&rdquo;) 输入</p>
<p><code>hugo</code></p>
<p>在博客生成器目录下会产生一个'<code>public/</code>'的文件夹，将这个文件夹部署到服务器上就可以了。</p>
</li>
</ol>
<h3 id="如何在github上部署自己静态博客呢">如何在github上部署自己静态博客呢？</h3>
<ol>
<li>在github上创建一个仓库，仓库名为自己github名字的且以&quot;<code>.github.io</code>&quot;结尾。（如：<a href="https://untilthecore.github.io/">untilthecore.github.io</a>）</li>
<li>上面步骤 11 中的 <code>public</code> 文件夹还记得吗？首先在博客生成器目录中将它忽略git管理，即放入<code>.gitignore</code>中。没有这个文件就创建一个这样的文件，内容保存 &ldquo;<code>/public/</code>&rdquo; 即可将此文件夹忽略；</li>
<li>进入 <code>public</code> 文件夹中，初始化 git 并将这个文件夹上传到步骤1中创建的github仓库中；</li>
<li>在浏览器中进入你自己仓库的<code>Settings</code>中，找到图片这个地方看看点击能不能看到博客呢？成功了，祝贺你！没成功，看看有没有哪一步错了？</li>
</ol>
<p><img src="../../static/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/githubPaes.jpg" alt="图片"></p>
]]></content>
        </item>
        
    </channel>
</rss>
