<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Welcome</title>
        <link>https://untilthecore.github.io/posts/</link>
        <description>Recent content in Posts on Welcome</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-Hans</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 28 Apr 2020 18:12:06 +0800</lastBuildDate>
        <atom:link href="https://untilthecore.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>HTML入门笔记1</title>
            <link>https://untilthecore.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
            <pubDate>Tue, 28 Apr 2020 18:12:06 +0800</pubDate>
            
            <guid>https://untilthecore.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
            <description>1.HTML是怎么产生的？  Tim Berners-Lee &amp;ndash; 万维网的创建者  探寻互联网的初始，那么就必然要了解一下李老爷子本人，这位牛人为如今精彩纷呈的互联网世界打下了坚实的地基。1989年他开发了世上第一个浏览器和第一个服务器，由此种下了互联网世界的种子，而且他发明的WWW、URL、HTTP一直延续至今。
那这个东西到底是怎么产生的呢？1、因为一杯咖啡，这让我联想到了java；2、为了可以上网冲浪；
2.HTML怎么快速开始 现代的编辑器配合Emmet语法可以快速创建一个HTML的骨架，虽然这节省了我们书写骨架代码的时间，但还是有必要了解一下这些内容是什么。 在vscode中创建一个HTML的文件，使用Emmet语法输入! + tab键即可快速生成html骨架。
3.HTML常用的章节标签有哪些？    章节标签 介绍     h1~h6 文章内容标题   section 相对于article元素更加广泛，每个区块都可以使用，比如页面里的导航菜单、文章正文、文章的评论等。   article 代表文档、页面或应用程序中独立的、完整的、可以独自被外部引用的内容。它可以是一篇博客、一篇帖子、一段用户评论   p 段落   header 头部   footer 页脚   main 主要内容。内容主体区域，放在在header和footer中间   aside 旁支内容   div 划分    4.HTML常用的内容标签有哪些？    内容标签 介绍     ol + li ordered list + list item。无序列表   ul + li unordered list + list item。有序列表   dl+ dd + dt description list + term + data。自定义列表   pre 被 pre 包裹的内容以原始内容输出。比如内容有多个空格以及换行都正常显示   hr 分隔线   br 换行   a 超链接标签   em 语气上强调   strong 表示内容重要   code 内容字体等宽。一般包裹代码块   quote 引用。行内引用   blockquote 块级引用。被包裹的内容与上一行内容有一个缩进    5.</description>
            <content type="html"><![CDATA[<h2 id="1html是怎么产生的">1.HTML是怎么产生的？</h2>
<blockquote>
<h5 id="tim-berners-lee----万维网的创建者">Tim Berners-Lee &ndash; 万维网的创建者</h5>
</blockquote>
<p>探寻互联网的初始，那么就必然要了解一下<a href="https://baike.baidu.com/item/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF%C2%B7%E6%9D%8E/8868412?fromtitle=Tim%20Berners-Lee&amp;fromid=1836386&amp;fr=aladdin">李老爷子</a>本人，这位牛人为如今精彩纷呈的互联网世界打下了坚实的地基。1989年他开发了世上第一个浏览器和第一个服务器，由此种下了互联网世界的种子，而且他发明的WWW、URL、HTTP一直延续至今。</p>
<p>那这个东西到底是怎么产生的呢？1、因为一杯咖啡，这让我联想到了java；2、为了可以上网冲浪；</p>
<h2 id="2html怎么快速开始">2.HTML怎么快速开始</h2>
<p>现代的编辑器配合Emmet语法可以快速创建一个HTML的骨架，虽然这节省了我们书写骨架代码的时间，但还是有必要了解一下这些内容是什么。
<img src="https://user-gold-cdn.xitu.io/2020/4/28/171c04205232f63b?w=1064&amp;h=224&amp;f=jpeg&amp;s=79204" alt="HTML骨架解读">
在vscode中创建一个HTML的文件，使用Emmet语法输入<code>! + tab键</code>即可快速生成html骨架。</p>
<h2 id="3html常用的章节标签有哪些">3.HTML常用的章节标签有哪些？</h2>
<table>
<thead>
<tr>
<th>章节标签</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>h1~h6</td>
<td>文章内容标题</td>
</tr>
<tr>
<td>section</td>
<td>相对于article元素更加广泛，每个区块都可以使用，比如页面里的导航菜单、文章正文、文章的评论等。</td>
</tr>
<tr>
<td>article</td>
<td>代表文档、页面或应用程序中独立的、完整的、可以独自被外部引用的内容。它可以是一篇博客、一篇帖子、一段用户评论</td>
</tr>
<tr>
<td>p</td>
<td>段落</td>
</tr>
<tr>
<td>header</td>
<td>头部</td>
</tr>
<tr>
<td>footer</td>
<td>页脚</td>
</tr>
<tr>
<td>main</td>
<td>主要内容。内容主体区域，放在在header和footer中间</td>
</tr>
<tr>
<td>aside</td>
<td>旁支内容</td>
</tr>
<tr>
<td>div</td>
<td>划分</td>
</tr>
</tbody>
</table>
<h2 id="4html常用的内容标签有哪些">4.HTML常用的内容标签有哪些？</h2>
<table>
<thead>
<tr>
<th>内容标签</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>ol + li</td>
<td>ordered list + list item。无序列表</td>
</tr>
<tr>
<td>ul + li</td>
<td>unordered list + list item。有序列表</td>
</tr>
<tr>
<td>dl+ dd + dt</td>
<td>description list + term + data。自定义列表</td>
</tr>
<tr>
<td>pre</td>
<td>被 pre 包裹的内容以原始内容输出。比如内容有多个空格以及换行都正常显示</td>
</tr>
<tr>
<td>hr</td>
<td>分隔线</td>
</tr>
<tr>
<td>br</td>
<td>换行</td>
</tr>
<tr>
<td>a</td>
<td>超链接标签</td>
</tr>
<tr>
<td>em</td>
<td>语气上强调</td>
</tr>
<tr>
<td>strong</td>
<td>表示内容重要</td>
</tr>
<tr>
<td>code</td>
<td>内容字体等宽。一般包裹代码块</td>
</tr>
<tr>
<td>quote</td>
<td>引用。行内引用</td>
</tr>
<tr>
<td>blockquote</td>
<td>块级引用。被包裹的内容与上一行内容有一个缩进</td>
</tr>
</tbody>
</table>
<h2 id="5html的全局属性有哪些">5.HTML的全局属性有哪些？</h2>
<p>全局属性即所有标签都会有的属性。
| 全局属性        | 介绍                                                                                                                                                     |
| &mdash;&mdash;&mdash;&mdash;&mdash; | &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; |
| class           | 类。给元素取一个类名，一般配合 css 设置样式                                                                                                              |
| id              | 全局唯一id，一般配合 js 使用，但是由于多处使用了浏览器也不报错，所以慎用                                                                                 |
| style           | 内联样式                                                                                                                                                 |
| title           | 鼠标移到标签上会在鼠标旁显示title的值                                                                                                                    |
| hidden          | 控制标签的隐藏                                                                                                                                           |
| tabindex        | 如果元素需要被键盘tab键选中，可以设置值。值 &lt; 0，表示不被tab选中；值 == 0，表示最后被选中；值 &gt; 0 表示按值大小顺序选中                                   |
| contenteditable | 使标签可被直接编辑。想要更直观看到这个属性的效果可以<a href="https://jsbin.com/varinuz/2/edit?html,output">点击这里</a>修改样式试试看，或者复制下面的代码运行一下。 |</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="color:#f92672">html</span>&gt;
&lt;<span style="color:#f92672">head</span>&gt;
  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>&gt;
  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;viewport&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;width=device-width&#34;</span>&gt;
  &lt;<span style="color:#f92672">title</span>&gt;JS Bin&lt;/<span style="color:#f92672">title</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">body</span>&gt;
<span style="color:#75715e">&lt;!-- 将style放入body并设置display为block再开启元素可编辑即可在网页上编辑页面样式 --&gt;</span>
  &lt;<span style="color:#f92672">style</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;display:block;&#34;</span> <span style="color:#a6e22e">contenteditable</span>&gt;
    <span style="color:#f92672">header</span> {
      <span style="color:#66d9ef">background-color</span>: <span style="color:#66d9ef">pink</span>;
    }
  &lt;/<span style="color:#f92672">style</span>&gt;
  &lt;<span style="color:#f92672">header</span>&gt;我是头部&lt;/<span style="color:#f92672">header</span>&gt;
  &lt;<span style="color:#f92672">section</span> <span style="color:#a6e22e">contenteditable</span>&gt;我是章节&lt;/<span style="color:#f92672">section</span>&gt;
  &lt;<span style="color:#f92672">footer</span>&gt;我是页脚&lt;/<span style="color:#f92672">footer</span>&gt;
&lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>正确使用hugo主题的姿势</title>
            <link>https://untilthecore.github.io/posts/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/</link>
            <pubDate>Mon, 27 Apr 2020 22:28:15 +0800</pubDate>
            
            <guid>https://untilthecore.github.io/posts/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/</guid>
            <description>在《如何用hugo搭建个人博客中》已经介绍了简单的主题引入办法，这里就不再赘述了。
现在我们来讲讲如何配置我们下载的新主题！（内容可能不多不全，Hugo的使用还在摸索阶段）
  下载主题前要先看主题的Demo，看是否是自己想要的。没有Demo示例给看那就clone下来后跑起来看看是不是中意的，但是有的clone到的主题有可能较精简，怎么办呢？往下看。
  选好中意的主题了，那么就一定要看作者的配置介绍，这个配置介绍一般都是介绍如何配置config.toml，但这个介绍可能不够全，那么就要自己看clone下来的主题中这个文件夹exampleSite中的config.toml。有的主题还有full-config.toml,这个内容更全面。以我使用的主题为例，路径结构为：themes\hello-friend-ng\exampleSite\config.toml
  接下来我将以我使用的主题为例，介绍config.toml配置内容
[[menu.main]] identifier = &amp;#34;blog&amp;#34; name = &amp;#34;Blogs&amp;#34; url = &amp;#34;/posts&amp;#34; [[menu.main]] name = &amp;#34;Categories&amp;#34; identifier = &amp;#34;categories&amp;#34; url = &amp;#34;/categories/&amp;#34; [[menu.main]] identifier = &amp;#34;tags&amp;#34; name = &amp;#34;Tags&amp;#34; url = &amp;#34;/tags/&amp;#34; [[menu.main]] identifier = &amp;#34;about&amp;#34; name = &amp;#34;About&amp;#34; url = &amp;#34;about/&amp;#34; 有[[menu.main]]即配置导航菜单，对应的地方如图：
[[params.social]] name = &amp;#34;email&amp;#34; url = &amp;#34;mailto:untilthecore@gmail.com&amp;#34; [[params.social]] name = &amp;#34;github&amp;#34; url = &amp;#34;https://github.com/UntilTheCore&amp;#34; 有[[params.social]]即配置图标链接，对应地方如图：
baseurl = &amp;#34;https://untilthecore.github.io/&amp;#34; title = &amp;#34;My Blog&amp;#34; languageCode = &amp;#34;zh-Hans&amp;#34; theme = &amp;#34;hello-friend-ng&amp;#34;  baseurl：配置站点基址，如果要放在github上或者自己的云服务器上，请正确配置地址，否则出了能访问主页，其他地方都是 404 title：设置标题 languageCode：设置语言 theme：设置主题  其他的小地方的配置有注释，配合本地服务器可以方面查看修改后的效果。</description>
            <content type="html"><![CDATA[<p>在《<a href="https://untilthecore.github.io/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">如何用hugo搭建个人博客中</a>》已经介绍了简单的主题引入办法，这里就不再赘述了。</p>
<p>现在我们来讲讲如何配置我们下载的新主题！（内容可能不多不全，Hugo的使用还在摸索阶段）</p>
<ol>
<li>
<p>下载主题前要先看主题的Demo，看是否是自己想要的。没有Demo示例给看那就clone下来后跑起来看看是不是中意的，但是有的clone到的主题有可能较精简，怎么办呢？往下看。</p>
</li>
<li>
<p>选好中意的主题了，那么就一定要看作者的配置介绍，这个配置介绍一般都是介绍如何配置<code>config.toml</code>，但这个介绍可能不够全，那么就要自己看clone下来的主题中这个文件夹<code>exampleSite</code>中的<code>config.toml</code>。有的主题还有<code>full-config.toml</code>,这个内容更全面。以我使用的主题为例，路径结构为：<code>themes\hello-friend-ng\exampleSite\config.toml</code></p>
</li>
<li>
<p>接下来我将以<a href="https://themes.gohugo.io/hugo-theme-hello-friend-ng/">我使用的主题</a>为例，介绍<code>config.toml</code>配置内容</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> <span style="color:#f92672">[[</span>menu.main<span style="color:#f92672">]]</span>
   identifier <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;blog&#34;</span>
   name       <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Blogs&#34;</span>
   url        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/posts&#34;</span>
 <span style="color:#f92672">[[</span>menu.main<span style="color:#f92672">]]</span>
   name       <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Categories&#34;</span>
   identifier <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;categories&#34;</span>
   url        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/categories/&#34;</span>
 <span style="color:#f92672">[[</span>menu.main<span style="color:#f92672">]]</span>
   identifier <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;tags&#34;</span>
   name       <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Tags&#34;</span>
   url        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/tags/&#34;</span>
 <span style="color:#f92672">[[</span>menu.main<span style="color:#f92672">]]</span>
   identifier <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;about&#34;</span>
   name       <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;About&#34;</span>
   url        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;about/&#34;</span>
</code></pre></div><p>有<code>[[menu.main]]</code>即配置导航菜单，对应的地方如图：</p>
<p><img src="../../static/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95%E5%9B%BE.png" alt="导航菜单图"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[[</span>params.social<span style="color:#f92672">]]</span>
name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;email&#34;</span>
url  <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mailto:untilthecore@gmail.com&#34;</span>

<span style="color:#f92672">[[</span>params.social<span style="color:#f92672">]]</span>
name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github&#34;</span>
url  <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://github.com/UntilTheCore&#34;</span>
</code></pre></div><p>有<code>[[params.social]]</code>即配置图标链接，对应地方如图：</p>
<p><img src="../../static/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/%E5%9B%BE%E6%A0%87%E9%93%BE%E6%8E%A5.jpg" alt="图标链接图"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">baseurl      <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://untilthecore.github.io/&#34;</span>
title        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My Blog&#34;</span>
languageCode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;zh-Hans&#34;</span>
theme        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello-friend-ng&#34;</span>
</code></pre></div><ul>
<li>baseurl：配置站点基址，如果要放在github上或者自己的云服务器上，请正确配置地址，否则出了能访问主页，其他地方都是 404</li>
<li>title：设置标题</li>
<li>languageCode：设置语言</li>
<li>theme：设置主题</li>
</ul>
<p>其他的小地方的配置有注释，配合本地服务器可以方面查看修改后的效果。</p>
</li>
<li>
<p>第一次使用时，可能会好奇我们的 <code>.md</code> 文件是怎么产生标签（Tags）和分类（Categories）的？这就是通过使用<code>hugo new posts/xxxxxx.md</code>创建博客文件时，hugo自动为我们在文件头部生成了这些内容：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">title: <span style="color:#e6db74">&#34;正确使用hugo主题的姿势&#34;</span>
date: 2020-04-27T22:28:15+08:00
draft: false
tags: <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;Hugo&#34;</span><span style="color:#f92672">]</span>
categories: <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;教程&#34;</span><span style="color:#f92672">]</span>
</code></pre></div><ul>
<li>title：文章标题；</li>
<li>data：文章被创建的事件</li>
<li>draft：是否草稿内容，如果为true，将不显示在博客站点中。</li>
<li>tags：为这篇文章创建标签，是数组形式<code>[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</code></li>
<li>categories：为这篇文章创建分类，是数组形式<code>[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</code></li>
</ul>
<p>由于在文章这里设置了<code>tags</code>和<code>categories</code>,所以我们可以在导航菜单中看到标签和文章分类信息。</p>
</li>
</ol>
<p>在<code>.md</code>文件中，还可以设置更多其他的内容，比如设置版权信息等。有需要的话可以自行了解，我的经验就是多下几个主题，看看这些作者是怎么配置的。如果你有更多更好的信息，欢迎来信告诉我</p>
<p>创建博客后如何配置主题的基础内容介绍完毕，配置好这些就可以愉快地写博客啦！如果想配置更多更强大的内容，可以多多翻看<a href="https://gohugo.io/documentation/">Hugo官方文档</a>。</p>
<h4 id="写博客时要注意的点">写博客时要注意的点：</h4>
<p>可能在posts中使用MarkDown插入图片时好好的，但是上传到github上后图片就不显示了呢？这是由于我们写文章时是在站点生成器的环境中，而上传的代码是在public中，为了保证上传后依然能正确显示，我使用的技巧是在public文件夹中新建一个static的文件夹用来保存我们文章的图片，且每一文章有对应的文件夹去保存图片，如图：</p>
<p><img src="../../static/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87%E7%9A%84%E4%BF%9D%E5%AD%98%E6%96%B9%E5%BC%8F.jpg" alt="文章图片的保存方式"></p>
<p>鉴于此，我们在<code>posts/</code>下写文章时使用的图片地址要以<code>public/posts/文章标题/index.html</code>为基准来找到<code>public\static</code>目录。一段示例：</p>
<pre><code>../../static/正确使用hugo主题的姿势/文章图片的保存方式.jpg
</code></pre>
<p>文章有误或不足之处，欢迎指正！谢谢！</p>
<h3 id="本文由untilthecore原创转载请说明作者和出处">本文由UntilTheCore原创，转载请说明作者和出处！</h3>
]]></content>
        </item>
        
        <item>
            <title>使用hugo搭建个人博客</title>
            <link>https://untilthecore.github.io/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
            <pubDate>Mon, 27 Apr 2020 13:06:46 +0800</pubDate>
            
            <guid>https://untilthecore.github.io/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
            <description>阅读前你需要了解这些内容：  git MarkDown  使用 Hugo 搭建博客的步骤非常简单。
按照官网 Quick Start 即可快速创建一个站点。此文旨在对官方文档细节补充以及部署到自己的github上。
  下载Hugo
  解压出对应包中的Hugo.exe到一个空目录
  将 2 中存放Hugo.exe的目录添加到系统变量&amp;quot;path&amp;quot;中。（不会设置？点这里）
  进入Hugo官网 点击 Quick Start
  当下载并设置好Hugo后，就可以直接从Step 2开始操作。
# 这个 quickstart 请改成你想要的名字,最好对应你github上的名字且全小写 # 比如：untilthecore.github.io-generator # 这个命令会生成 untilthecore.github.io-generator 的文件夹 # 这个文件夹就是博客站点的生成器，为了方便知道这个文件夹是干什么的，在最后加上 generator，当然 creator 也行 hugo new site quickstart # 那么真正要输入的命令为 hugo new site untilthecore.github.io-generator   当得到站点生成器文件夹后，使用 cd 命令进入文件夹并依次执行以下命令
# 为 untilthecore.github.io-generator 初始化 git 仓库 git init # 为站点设置一个主题（这个主题可以修改） git submodule add https://github.</description>
            <content type="html"><![CDATA[<h3 id="阅读前你需要了解这些内容">阅读前你需要了解这些内容：</h3>
<ul>
<li>git</li>
<li>MarkDown</li>
</ul>
<p>使用 Hugo 搭建博客的步骤非常简单。</p>
<p>按照官网 Quick Start 即可快速创建一个站点。此文旨在对官方文档细节补充以及部署到自己的github上。</p>
<ol>
<li>
<p><a href="https://github.com/gohugoio/hugo/releases">下载Hugo</a></p>
</li>
<li>
<p>解压出对应包中的Hugo.exe到一个空目录</p>
</li>
<li>
<p>将 2 中存放Hugo.exe的目录添加到系统变量&quot;path&quot;中。（不会设置？<a href="https://www.jb51.net/os/win10/663281.html">点这里</a>）</p>
</li>
<li>
<p>进入<a href="https://gohugo.io/">Hugo官网</a> 点击 Quick Start</p>
</li>
<li>
<p>当下载并设置好Hugo后，就可以直接从Step 2开始操作。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 这个 quickstart 请改成你想要的名字,最好对应你github上的名字且全小写</span>
<span style="color:#75715e"># 比如：untilthecore.github.io-generator</span>
<span style="color:#75715e"># 这个命令会生成 untilthecore.github.io-generator 的文件夹</span>
<span style="color:#75715e"># 这个文件夹就是博客站点的生成器，为了方便知道这个文件夹是干什么的，在最后加上 generator，当然 creator 也行</span>
hugo new site quickstart

<span style="color:#75715e"># 那么真正要输入的命令为</span>
hugo new site untilthecore.github.io-generator
</code></pre></div></li>
<li>
<p>当得到站点生成器文件夹后，使用 <code>cd</code> 命令进入文件夹并依次执行以下命令</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> <span style="color:#75715e"># 为 untilthecore.github.io-generator 初始化 git 仓库</span>
 git init
 <span style="color:#75715e"># 为站点设置一个主题（这个主题可以修改）</span>
 git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
 <span style="color:#75715e"># 向配置文件写入 theme = &#34;ananke&#34; 即配置 ananke 主题</span>
 echo <span style="color:#e6db74">&#39;theme = &#34;ananke&#34;&#39;</span> &gt;&gt; config.toml
</code></pre></div></li>
<li>
<p>完成以上步骤站点就配置好了，输入以下命令即可创建第一篇博客了</p>
<p><code>hugo new posts/my-first-post.md</code></p>
</li>
<li>
<p>通过以上步骤，站点已经创建好了，且写了一篇文章，赶紧通过这个命令启动本地服务器看看你的博客是什么样子吧。</p>
<p><code>hugo server -D</code></p>
</li>
<li>
<p>基础完成了，接下来需要对站点进行一些设置，让它看起来更像是你自己的站点。找到<code>config.toml</code> 文件，配置这些内容：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 配置域，如果配置到了github上，这里要改为你自己github.io的地址。</span>
baseURL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://example.org/&#34;</span>
<span style="color:#75715e"># 配置语言 中文可以改为 &#34;zh-Hans&#34;</span>
languageCode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;en-us&#34;</span>
<span style="color:#75715e"># 站点标签名，浏览器标签上的内容</span>
title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My New Hugo Site&#34;</span>
<span style="color:#75715e"># 主题设置，有新主题，就把主题名设置到这里</span>
theme <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ananke&#34;</span>
</code></pre></div></li>
<li>
<p>本地操作已经完成了，想要将站点部署到github或者自己的云服务器上，请继续往下看。</p>
</li>
<li>
<p>都配置好后，确保你控制台还处于博客生成器目录下(即&quot;untilthecore.github.io-generator&rdquo;) 输入</p>
<p><code>hugo</code></p>
<p>在博客生成器目录下会产生一个'<code>public/</code>'的文件夹，将这个文件夹部署到服务器上就可以了。</p>
</li>
</ol>
<h3 id="如何在github上部署自己静态博客呢">如何在github上部署自己静态博客呢？</h3>
<ol>
<li>在github上创建一个仓库，仓库名为自己github名字的且以&quot;<code>.github.io</code>&quot;结尾。（如：<a href="https://untilthecore.github.io/">untilthecore.github.io</a>）</li>
<li>上面步骤 11 中的 <code>public</code> 文件夹还记得吗？首先在博客生成器目录中将它忽略git管理，即放入<code>.gitignore</code>中。没有这个文件就创建一个这样的文件，内容保存 &ldquo;<code>/public/</code>&rdquo; 即可将此文件夹忽略；</li>
<li>进入 <code>public</code> 文件夹中，初始化 git 并将这个文件夹上传到步骤1中创建的github仓库中；</li>
<li>在浏览器中进入你自己仓库的<code>Settings</code>中，找到图片这个地方看看点击能不能看到博客呢？成功了，祝贺你！没成功，看看有没有哪一步错了？</li>
</ol>
<p><img src="../../static/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/githubPaes.jpg" alt="图片"></p>
]]></content>
        </item>
        
    </channel>
</rss>
