<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>css on Welcome</title>
    <link>https://untilthecore.github.io/tags/css/</link>
    <description>Recent content in css on Welcome</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 02 May 2020 17:33:32 +0800</lastBuildDate>
    
	<atom:link href="https://untilthecore.github.io/tags/css/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>初识渲染原理和CSS动画</title>
      <link>https://untilthecore.github.io/posts/%E5%88%9D%E8%AF%86%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E5%92%8Ccss%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Sat, 02 May 2020 17:33:32 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/%E5%88%9D%E8%AF%86%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E5%92%8Ccss%E5%8A%A8%E7%94%BB/</guid>
      <description>1、浏览器渲染原理 浏览器到底是怎么将一个html文件渲染成生动的页面的？话不多说，直接看图
以图中的过程，浏览器的渲染过程大致就是：
 通过HTML解析将HTML文件解析为 DOM 树; 通过CSS解析将CSS文件解析出样式规则（CSSOM树）； 通过合并DOM树和CSSOM树将生成渲染树； 依赖渲染树开始布局（文档流、盒模型、确定位置和尺寸计算）； 知道了哪些节点可见、它们的计算样式以及几何信息，将渲染树中的每个节点转换成屏幕上的实际像素即开始绘制。把边框、文字颜色、阴影等绘制出来。 最后将合成好的页面展示出来。  延伸：
 层叠样式的由来  还是先看图：
为页面上的任何对象计算最后一组样式时，浏览器都会先从适用于该节点的最通用规则开始（例如，如果该节点是 body 元素的子项，则应用所有 body 样式）这种行为被称作为“样式继承”，那么为了不想要继承过来的样式，那么就需要自己单独写样式来覆盖原来的样式，即层叠。而不同的浏览器提供了不同的默认样式（“User Agent 样式”），这让我们一套代码却产生了五花八门的样式，这不符合设计需求。所以又通常要编写一个全局样式（reset.css / normalize.css）来清除默认样式，让代码在不同浏览器上产生一致的效果。
&amp;ldquo;display：none&amp;quot;的元素是否会被渲染？  答案是否。 同为显示和隐藏的一个属性是&amp;quot;visibility&amp;rdquo;,visibility: hidden 与 display: none 是不一样的。前者隐藏元素，但元素仍占据着布局空间（即将其渲染成一个空框），而后者 (display: none) 将元素从渲染树中完全移除，元素既不可见，也不是布局的组成部分。
回流和重绘  回流(reflow)： 回流或称为layout重排。当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染。reflow 会从这个 html的根节点开始往下递归，依次计算所有的结点几何尺寸和位置。reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击等只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。
重绘(repaint)： 改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。
每次Reflow，Repaint后浏览器还需要合并渲染层并输出到屏幕上。所有的这些都会是动画卡顿的原因。 Reflow 的成本比 Repaint 的成本高得多的多。一个结点的 Reflow 很有可能导致子结点，甚至父点以及同级结点的 Reflow 。在一些高性能的电脑上也许还没什么，但是如果 Reflow 发生在手机上，那么这个过程是延慢加载和耗电的。可以在csstrigger上查找某个css属性会触发什么事件。
reflow与repaint的时机： display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发生位置变化。 有些情况下，比如修改了元素的样式，浏览器并不会立刻 reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步 reflow。 有些情况下，比如 resize 窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行 reflow。</description>
    </item>
    
    <item>
      <title>CSS布局</title>
      <link>https://untilthecore.github.io/posts/css%E5%B8%83%E5%B1%80/</link>
      <pubDate>Fri, 01 May 2020 15:15:09 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/css%E5%B8%83%E5%B1%80/</guid>
      <description>float布局 常见问题 原理：在父盒子浮动元素的最后加上一个盒子，并给这个盒子设置属性&amp;quot;clear:both&amp;rdquo;，这样就可以实现最基础的清除浮动了。 但是这样有个缺点，就是总要去手动增加一个html元素，然后为这个元素设置css样式，太麻烦。什么方式可以避免呢？那就是使用css伪元素。对css伪元素不太了解的话，可以看这里。 使用伪元素的方式清除浮动，则只需要为浮动盒子的父盒子添加一个类样式。类样式代码如下：
/* 不兼容ie低版本 */ .clearfix { content:&amp;#34;&amp;#34;; display:block; clear:both; } /* 兼容ie低版本 */ /* after伪元素清除法 */ .clearfix:after { content: &amp;#34;&amp;#34;; display: block; height: 0; clear: both; visibility: hidden; } .clearfix: { *zoom: 1; /*为i6/i7老式浏览器准备*/ } /* 双伪元素清除法 */ .clearfix:before, .clearfix:after { content: &amp;#34;&amp;#34;; display: table; } .clearfix:after { clear: both; } .clearfix: { *zoom: 1; /*为i6/i7老式浏览器准备*/ } 2. 图片logo与底部边框有间隙 给img标签添设置属性&amp;quot;vertical-align: middle;&amp;ldquo;值可以是这个属性的其他值。
3. 边框影响了布局 将border属性改为使用outline属性。同样都可以显示边框，但outline不影响布局。
4. 块元素居中显示 在pc上布局时，有时候要对一个固定宽度的块元素设置居中显示，可以使用&amp;quot;margin:0 auto;&amp;ldquo;的方式，但是这并不好，因为假如这个要居中显示的元素就需要一个上外边距，那么使用&amp;quot;margin:0 auto;&amp;ldquo;会破坏布局。比较好的方式是为元素设置以下两种属性：</description>
    </item>
    
    <item>
      <title>CSS应知应会</title>
      <link>https://untilthecore.github.io/posts/css%E5%BA%94%E7%9F%A5%E5%BA%94%E4%BC%9A/</link>
      <pubDate>Fri, 01 May 2020 14:59:14 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/css%E5%BA%94%E7%9F%A5%E5%BA%94%E4%BC%9A/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>