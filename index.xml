<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome</title>
    <link>https://untilthecore.github.io/</link>
    <description>Recent content on Welcome</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 01 Jun 2020 23:11:21 +0800</lastBuildDate>
    
	<atom:link href="https://untilthecore.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript初识</title>
      <link>https://untilthecore.github.io/posts/javascript%E5%88%9D%E8%AF%86/</link>
      <pubDate>Mon, 01 Jun 2020 23:11:21 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/javascript%E5%88%9D%E8%AF%86/</guid>
      <description>初学 JavaScript 要掌握的知识有哪些呢？
1.表达式和语句 表达式： 一个式子，它具有表达某些信息的能力。比如1+2表达式的值为 3。需要注意的地方，console.log表达式的值为函数本身，但是console.log(1)表达式的值为 undefined，只是在控制台中显示的内容为 1。
语句： 描述一段内容的句子。比如var a = 1
它们两者的区别在于：
 表达式一般都有值，语句可能有也可能没有。 语句一般会改变环境，比如声明或者赋值。  但这些都不绝对，特殊情况特殊看待。
2. 标识符的规则 在对变量名等标识符命名的时候并非随心所欲随便命名的，要遵守一定的约定规则。首先 JavaScript 是对大小写敏感的，a和A会被严格区分，所以有时候在函数命名上要小心避免上下文名称不同造成的意外错误。
标识符第一个字符命名规则：
 不能是数字； 可以是 Unicode 字符或$、_和中文；  标识符第二个及以后的字符命名规则：
 可以为任意字符；  注：标识符的命名要好认、好记通俗易懂。不要写很多个_或是使用.这种比较特殊的字符。标识符要写时好写，后面 review 时要好懂才行。
3.条件判断语句 &amp;ldquo;if&amp;hellip;else&amp;hellip;&amp;quot; 是常用条件判断语句
// 伪代码 if(表达式){ 语句1 ... }else { 语句2 ... } 在 if 的块中的语句如果只有一句，则可以省略外面的花括号，只写这条语句，但是不推荐这么做，这样会容易造成阅读时看错代码流程。在 if&amp;hellip;else 代码块中还可以继续继续嵌套 if&amp;hellip;else 代码块来处理复杂的条件判断逻辑。
// 伪代码 if(表达式){ if(表达式){ 语句1 ... }else{ 语句2 ... } 语句3 .</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>https://untilthecore.github.io/posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Wed, 06 May 2020 18:34:04 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>URL 概述 URL（Uniform Resource Locator） 指的是统一资源定位符。URL 无非就是一个给定的独特资源在 Web 上的地址。理论上说，每个有效的 URL 都指向一个独特的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等。
1.URL 一个 URL 一般包含这些内容：
 协议：http/https/ftp/mailto 等。http:// 是协议,它表明了浏览器必须使用何种协议； 端口：用于确认访问时系统提供什么样的服务，比如 http 端口是 80，https 为 443。0-1023 是留给系统使用的，自己使用时不要随意占用这些端口，除了这些端口一般我们都可以随意使用，但是诸多软件有默认的端口占用，比如 mysql 会占用 3306 端口，所以使用端口时还要小心占用到别的软件的端口。想了解软件的端口使用情况，看TCP/UDP 常见端口； 域名：例如&amp;quot;www.baidu.com&amp;rdquo;。它表明正在请求哪个 Web 服务器，或者可以直接使用 ip 地址，但是这并不好记忆。另外，一个域名可以对应多个 ip 地址； 资源请求路径：例如/path/index.html； 请求参数：请求时携带的额外参数信息，这些参数是用 &amp;amp; 符号分隔的键/值对列表。例如：&amp;quot;?key1=value1&amp;amp;key2=value2&amp;rdquo;; 锚点信息：锚点表示资源中的一种“书签”，通过锚点，可以跳到其所在位置，比如文章开头的目录信息，点击后即可跳到当前页面的某个内容处，这就是利用了锚点原理。锚点在地址栏上是以&amp;rsquo;#&amp;lsquo;后面的内容确定的，需要注意的是，锚点内容并被发送到服务器，它属于浏览器本地处理的内容。  2.DNS DNS（Domain Name System）：域名系统。为什么要有域名系统？我们可以想象一下，如果在访问互联网资源时，都是通过记录 ip 来访问的话，这个记忆难度有多大，而且还难以书写。比如访问百度时在浏览器地址栏输入&amp;quot;183.232.231.172&amp;rdquo;，这太繁琐了。于是有了域名系统，在域名服务商那里我们可以购买一个域名，并将域名解析到服务器外网 ip 地址，这样就可以通过域名来访问自己的服务器了。而且域名是可以绑定多个 ip 地址的，这样可以实现在不同地域的人们访问域名地址时连接到最近的服务器。比如腾讯设立华东、西南、华北等服务器，这样在访问时电信服务商通过域名解析将最近的服务器资源返回，提升我们的上网体验。
使用控制台的&amp;rsquo;nslookup&amp;rsquo;命令可以知道域名对应的服务器 ip 地址。例：nslookup www.baidu.com
3.IP IP 的作用是什么，ping 命令怎么用？ ip（Internet Protocol）：网络协议。ip 的作用相当于一个拥有详细地址的门牌号，通过这个门牌号可以找到具体的某户人家。而在网络上需要访问某个站点的某个服务器资源就需要通过 ip 去唯一标识。我们在访问某个地址时可以通过控制台的ping命令去查看是否可以和这个 ip 地址连接。如果可以则能获取到服务器返回的信息。</description>
    </item>
    
    <item>
      <title>初识渲染原理和CSS动画</title>
      <link>https://untilthecore.github.io/posts/%E5%88%9D%E8%AF%86%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E5%92%8Ccss%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Sat, 02 May 2020 17:33:32 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/%E5%88%9D%E8%AF%86%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E5%92%8Ccss%E5%8A%A8%E7%94%BB/</guid>
      <description>1、浏览器渲染原理 浏览器到底是怎么将一个 html 文件渲染成生动的页面的？话不多说，直接看图
以图中的过程，浏览器的渲染过程大致就是：
 通过 HTML 解析将 HTML 文件解析为 DOM 树; 通过 CSS 解析将 CSS 文件解析出样式规则（CSSOM 树）； 通过合并 DOM 树和 CSSOM 树将生成渲染树； 依赖渲染树开始布局（文档流、盒模型、确定位置和尺寸计算）； 知道了哪些节点可见、它们的计算样式以及几何信息，将渲染树中的每个节点转换成屏幕上的实际像素即开始绘制。把边框、文字颜色、阴影等绘制出来。 最后将合成好的页面展示出来。  延伸：
 层叠样式的由来  还是先看图：
为页面上的任何对象计算最后一组样式时，浏览器都会先从适用于该节点的最通用规则开始（例如，如果该节点是 body 元素的子项，则应用所有 body 样式）这种行为被称作为“样式继承”，那么为了不想要继承过来的样式，那么就需要自己单独写样式来覆盖原来的样式，即层叠。而不同的浏览器提供了不同的默认样式（“User Agent 样式”），这让我们一套代码却产生了五花八门的样式，这不符合设计需求。所以又通常要编写一个全局样式（reset.css / normalize.css）来清除默认样式，让代码在不同浏览器上产生一致的效果。
&amp;ldquo;display：none&amp;quot;的元素是否会被渲染？  答案是否。 同为显示和隐藏的一个属性是&amp;quot;visibility&amp;rdquo;,visibility: hidden 与 display: none 是不一样的。前者隐藏元素，但元素仍占据着布局空间（即将其渲染成一个空框），而后者 (display: none) 将元素从渲染树中完全移除，元素既不可见，也不是布局的组成部分。
回流和重绘  回流(reflow)： 回流或称为 layout 重排。当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染。reflow 会从这个 html 的根节点开始往下递归，依次计算所有的结点几何尺寸和位置。reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击等只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。
重绘(repaint)： 改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。
每次 Reflow，Repaint 后浏览器还需要合并渲染层并输出到屏幕上。所有的这些都会是动画卡顿的原因。 Reflow 的成本比 Repaint 的成本高得多的多。一个结点的 Reflow 很有可能导致子结点，甚至父点以及同级结点的 Reflow 。在一些高性能的电脑上也许还没什么，但是如果 Reflow 发生在手机上，那么这个过程是延慢加载和耗电的。可以在 csstrigger 上查找某个 css 属性会触发什么事件。</description>
    </item>
    
    <item>
      <title>CSS布局</title>
      <link>https://untilthecore.github.io/posts/css%E5%B8%83%E5%B1%80/</link>
      <pubDate>Fri, 01 May 2020 15:15:09 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/css%E5%B8%83%E5%B1%80/</guid>
      <description>float布局 常见问题 原理：在父盒子浮动元素的最后加上一个盒子，并给这个盒子设置属性&amp;quot;clear:both&amp;rdquo;，这样就可以实现最基础的清除浮动了。 但是这样有个缺点，就是总要去手动增加一个html元素，然后为这个元素设置css样式，太麻烦。什么方式可以避免呢？那就是使用css伪元素。对css伪元素不太了解的话，可以看这里。 使用伪元素的方式清除浮动，则只需要为浮动盒子的父盒子添加一个类样式。类样式代码如下：
/* 不兼容ie低版本 */ .clearfix { content:&amp;#34;&amp;#34;; display:block; clear:both; } /* 兼容ie低版本 */ /* after伪元素清除法 */ .clearfix:after { content: &amp;#34;&amp;#34;; display: block; height: 0; clear: both; visibility: hidden; } .clearfix: { *zoom: 1; /*为i6/i7老式浏览器准备*/ } /* 双伪元素清除法 */ .clearfix:before, .clearfix:after { content: &amp;#34;&amp;#34;; display: table; } .clearfix:after { clear: both; } .clearfix: { *zoom: 1; /*为i6/i7老式浏览器准备*/ } 2. 图片logo与底部边框有间隙 给img标签添设置属性&amp;quot;vertical-align: middle;&amp;ldquo;值可以是这个属性的其他值。
3. 边框影响了布局 将border属性改为使用outline属性。同样都可以显示边框，但outline不影响布局。
4. 块元素居中显示 在pc上布局时，有时候要对一个固定宽度的块元素设置居中显示，可以使用&amp;quot;margin:0 auto;&amp;ldquo;的方式，但是这并不好，因为假如这个要居中显示的元素就需要一个上外边距，那么使用&amp;quot;margin:0 auto;&amp;ldquo;会破坏布局。比较好的方式是为元素设置以下两种属性：</description>
    </item>
    
    <item>
      <title>CSS应知应会</title>
      <link>https://untilthecore.github.io/posts/css%E5%BA%94%E7%9F%A5%E5%BA%94%E4%BC%9A/</link>
      <pubDate>Fri, 01 May 2020 14:59:14 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/css%E5%BA%94%E7%9F%A5%E5%BA%94%E4%BC%9A/</guid>
      <description></description>
    </item>
    
    <item>
      <title>HTML入门之HTML常用标签</title>
      <link>https://untilthecore.github.io/posts/html%E5%85%A5%E9%97%A8%E4%B9%8Bhtml%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Wed, 29 Apr 2020 11:00:02 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/html%E5%85%A5%E9%97%A8%E4%B9%8Bhtml%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>标签 常用属性 作用     a href \ target 1、跳转外部页面；2、跳转内部锚点；3、跳转到邮箱或电话   img src \ alt \ width \ height 发出 get 请求，展示一张图片   form action \ method 表单。发送 get 或 post 请求，然后刷新页面   input type [ &amp;ldquo;text&amp;rdquo; , &amp;ldquo;password&amp;rdquo; , &amp;ldquo;file&amp;rdquo;，&amp;ldquo;submit&amp;rdquo;，&amp;ldquo;hidden&amp;quot;等 ] \ checked \ value \ disabled \ name 让用户输入内容。通过 type 确定不同的 input 内容，通常搭配 form 使用   table - 表格。使用相对较少    1.</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://untilthecore.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Tue, 28 Apr 2020 18:12:06 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>1.HTML 是怎么产生的？  Tim Berners-Lee &amp;ndash; 万维网的创建者  探寻互联网的初始，那么就必然要了解一下李老爷子本人，这位牛人为如今精彩纷呈的互联网世界打下了坚实的地基。1989 年他开发了世上第一个浏览器和第一个服务器，由此种下了互联网世界的种子，而且他发明的 WWW、URL、HTTP 一直延续至今。
那这个东西到底是怎么产生的呢？1、因为一杯咖啡，这让我联想到了 java；2、为了可以上网冲浪；
2.HTML 怎么快速开始 现代的编辑器配合 Emmet 语法可以快速创建一个 HTML 的骨架，虽然这节省了我们书写骨架代码的时间，但还是有必要了解一下这些内容是什么。 在 vscode 中创建一个 HTML 的文件，使用 Emmet 语法输入! + tab键即可快速生成 html 骨架。
3.HTML 常用的章节标签有哪些？    章节标签 介绍     h1~h6 文章内容标题   section 相对于 article 元素更加广泛，每个区块都可以使用，比如页面里的导航菜单、文章正文、文章的评论等。   article 代表文档、页面或应用程序中独立的、完整的、可以独自被外部引用的内容。它可以是一篇博客、一篇帖子、一段用户评论   p 段落   header 头部   footer 页脚   main 主要内容。内容主体区域，放在在 header 和 footer 中间   aside 旁支内容   div 划分    4.</description>
    </item>
    
    <item>
      <title>正确使用hugo主题的姿势</title>
      <link>https://untilthecore.github.io/posts/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/</link>
      <pubDate>Mon, 27 Apr 2020 22:28:15 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8hugo%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A7%BF%E5%8A%BF/</guid>
      <description>在《如何用hugo搭建个人博客中》已经介绍了简单的主题引入办法，这里就不再赘述了。
现在我们来讲讲如何配置我们下载的新主题！（内容可能不多不全，Hugo的使用还在摸索阶段）
  下载主题前要先看主题的Demo，看是否是自己想要的。没有Demo示例给看那就clone下来后跑起来看看是不是中意的，但是有的clone到的主题有可能较精简，怎么办呢？往下看。
  选好中意的主题了，那么就一定要看作者的配置介绍，这个配置介绍一般都是介绍如何配置config.toml，但这个介绍可能不够全，那么就要自己看clone下来的主题中这个文件夹exampleSite中的config.toml。有的主题还有full-config.toml,这个内容更全面。以我使用的主题为例，路径结构为：themes\hello-friend-ng\exampleSite\config.toml
  接下来我将以我使用的主题为例，介绍config.toml配置内容
[[menu.main]] identifier = &amp;#34;blog&amp;#34; name = &amp;#34;Blogs&amp;#34; url = &amp;#34;/posts&amp;#34; [[menu.main]] name = &amp;#34;Categories&amp;#34; identifier = &amp;#34;categories&amp;#34; url = &amp;#34;/categories/&amp;#34; [[menu.main]] identifier = &amp;#34;tags&amp;#34; name = &amp;#34;Tags&amp;#34; url = &amp;#34;/tags/&amp;#34; [[menu.main]] identifier = &amp;#34;about&amp;#34; name = &amp;#34;About&amp;#34; url = &amp;#34;about/&amp;#34; 有[[menu.main]]即配置导航菜单，对应的地方如图：
[[params.social]] name = &amp;#34;email&amp;#34; url = &amp;#34;mailto:untilthecore@gmail.com&amp;#34; [[params.social]] name = &amp;#34;github&amp;#34; url = &amp;#34;https://github.com/UntilTheCore&amp;#34; 有[[params.social]]即配置图标链接，对应地方如图：
baseurl = &amp;#34;https://untilthecore.github.io/&amp;#34; title = &amp;#34;My Blog&amp;#34; languageCode = &amp;#34;zh-Hans&amp;#34; theme = &amp;#34;hello-friend-ng&amp;#34;  baseurl：配置站点基址，如果要放在github上或者自己的云服务器上，请正确配置地址，否则出了能访问主页，其他地方都是 404 title：设置标题 languageCode：设置语言 theme：设置主题  其他的小地方的配置有注释，配合本地服务器可以方面查看修改后的效果。</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人博客</title>
      <link>https://untilthecore.github.io/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 27 Apr 2020 13:06:46 +0800</pubDate>
      
      <guid>https://untilthecore.github.io/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>阅读前你需要了解这些内容：  git MarkDown  使用 Hugo 搭建博客的步骤非常简单。
按照官网 Quick Start 即可快速创建一个站点。此文旨在对官方文档细节补充以及部署到自己的github上。
  下载Hugo
  解压出对应包中的Hugo.exe到一个空目录
  将 2 中存放Hugo.exe的目录添加到系统变量&amp;quot;path&amp;quot;中。（不会设置？点这里）
  进入Hugo官网 点击 Quick Start
  当下载并设置好Hugo后，就可以直接从Step 2开始操作。
# 这个 quickstart 请改成你想要的名字,最好对应你github上的名字且全小写 # 比如：untilthecore.github.io-generator # 这个命令会生成 untilthecore.github.io-generator 的文件夹 # 这个文件夹就是博客站点的生成器，为了方便知道这个文件夹是干什么的，在最后加上 generator，当然 creator 也行 hugo new site quickstart # 那么真正要输入的命令为 hugo new site untilthecore.github.io-generator   当得到站点生成器文件夹后，使用 cd 命令进入文件夹并依次执行以下命令
# 为 untilthecore.github.io-generator 初始化 git 仓库 git init # 为站点设置一个主题（这个主题可以修改） git submodule add https://github.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://untilthecore.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untilthecore.github.io/about/</guid>
      <description>About me 才疏学浅，一个平凡的编码者。
欢迎访问我的github
欢迎访问我的语雀
欢迎访问我的掘金</description>
    </item>
    
  </channel>
</rss>